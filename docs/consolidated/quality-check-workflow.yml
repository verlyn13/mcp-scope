# Enhanced GitHub Actions workflow with documentation quality checks
# Place this in .github/workflows/hugo-deploy.yml to replace the current workflow

name: Deploy Hugo site to GitHub Pages with Quality Checks

on:
  # Runs on pushes to the main branch
  push:
    branches:
      - main  # Set to your default branch if different (e.g., master)
    
  # Allows manual triggering from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Documentation Quality Check job
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Set up environment
        run: |
          mkdir -p doc-reports
          chmod +x ./doc-doctor.sh
          chmod +x ./doc-doctor-modules/*.sh
      
      - name: Run documentation quality checks
        id: doc-doctor
        run: |
          ./doc-doctor.sh --check-level standard --output-format markdown --report-dir ./doc-reports
          echo "REPORT_PATH=$(ls -t ./doc-reports/doc-health-report-*.md | head -1)" >> $GITHUB_ENV
          
          # Determine if there are critical issues
          CRITICAL_ISSUES=$(grep -c "CRITICAL" $REPORT_PATH || echo "0")
          echo "CRITICAL_ISSUES=$CRITICAL_ISSUES" >> $GITHUB_ENV
          
          if [ "$CRITICAL_ISSUES" -gt 0 ]; then
            echo "::warning::Documentation has $CRITICAL_ISSUES critical issues. See quality report for details."
          else
            echo "::notice::Documentation passed quality checks."
          fi
      
      - name: Upload quality report
        uses: actions/upload-artifact@v3
        with:
          name: documentation-quality-report
          path: ${{ env.REPORT_PATH }}
          retention-days: 14
      
      # Fail the workflow if configured to block on critical issues
      # Uncomment when team is ready for strict enforcement
      # - name: Check for critical issues
      #   if: env.CRITICAL_ISSUES > 0
      #   run: |
      #     echo "::error::Documentation has ${{ env.CRITICAL_ISSUES }} critical issues that must be fixed before deployment."
      #     exit 1

  # Build job
  build:
    runs-on: ubuntu-latest
    needs: quality-check
    env:
      HUGO_VERSION: 0.111.3  # Set to a specific Hugo version for consistency
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb
          sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3

      - name: Build with Hugo
        run: |
          hugo \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
        
      - name: Create .nojekyll file
        run: touch public/.nojekyll
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
      
      - name: Download quality report
        uses: actions/download-artifact@v3
        with:
          name: documentation-quality-report
          path: ./quality-report
      
      - name: Add quality report to job summary
        run: |
          echo "# Documentation Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Deployment completed successfully. Full quality report is available as a workflow artifact." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Summary from Quality Checks" >> $GITHUB_STEP_SUMMARY
          
          # Extract and include summary section from the report
          REPORT_FILE=$(ls -t ./quality-report/*.md | head -1)
          awk '/^## Summary$/,/^##/ {if (!/^## [^S]/) print}' $REPORT_FILE >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Site URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at:** $(date)" >> $GITHUB_STEP_SUMMARY