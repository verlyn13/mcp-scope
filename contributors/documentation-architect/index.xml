<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation Architect on ScopeCam MCP Documentation</title><link>https://example.github.io/mcp-scope/contributors/documentation-architect/</link><description>Recent content in Documentation Architect on ScopeCam MCP Documentation</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://example.github.io/mcp-scope/contributors/documentation-architect/index.xml" rel="self" type="application/rss+xml"/><item><title>Build Engineer Next Steps</title><link>https://example.github.io/mcp-scope/project/build-engineer-next-steps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/build-engineer-next-steps/</guid><description>Build Engineer Next Steps üü¢ Active
‚Ü©Ô∏è Back to Documentation Hub
Overview This document outlines the next steps for the build engineer to continue MCP implementation work. It consolidates information from existing plans and provides a clear sequence of tasks based on the current project state.
Current Project Status The initial implementation of the Multi-Agent Control Platform (MCP) is well underway. The following components have been completed:
‚úÖ Project structure and organization ‚úÖ Core MCP framework (interfaces, models, state machine) ‚úÖ NATS messaging integration ‚úÖ Basic orchestrator with agent management ‚úÖ Camera integration agent with mock USB detection ‚úÖ Python processor agent ‚úÖ Containerized development environment ‚úÖ Comprehensive documentation ‚úÖ Unit testing framework ‚úÖ Health monitoring system with metrics collection ‚úÖ Resilience mechanisms (circuit breaker, state change listeners) Next Day Tasks 1.</description></item><item><title>Content Inventory and Migration Prioritization</title><link>https://example.github.io/mcp-scope/content-inventory-and-prioritization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/content-inventory-and-prioritization/</guid><description>Content Inventory and Migration Prioritization üü¢ Active
Overview This document provides a complete inventory of all existing documentation to be migrated to the Hugo static site framework, along with a prioritized migration order. This structured approach ensures systematic migration of content while maintaining documentation availability throughout the process.
Complete Content Inventory The following tables list all documentation files in the current structure, organized by layer and section.
Root Documentation Layer Project Documentation Current Path Hugo Path Status Priority /docs/README.</description></item><item><title>Current Project Focus</title><link>https://example.github.io/mcp-scope/project/current-focus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/current-focus/</guid><description>Current Project Focus: Phase 1 Core Infrastructure ‚Ü©Ô∏è Back to Start Here | ‚Ü©Ô∏è Back to Documentation Index
Last Updated: March 22, 2025
Next Update: March 29, 2025
Current Sprint Priority We are currently in Sprint 1 of Phase 1 implementation, focused on establishing the core infrastructure components of the Multi-Agent Control Platform.
Primary Objectives This Week Implement FSM Framework and Agent Interfaces ‚¨ÖÔ∏è HIGHEST PRIORITY
Complete the core agent state machine implementation Implement the base agent interface Create the agent lifecycle management components Set Up NATS Messaging Integration</description></item><item><title>Doc Doctor Guide</title><link>https://example.github.io/mcp-scope/doc-doctor-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/doc-doctor-guide/</guid><description>Doc Doctor: Documentation Health Check System Status: Active ‚Ü©Ô∏è Back to Tools | ‚Ü©Ô∏è Back to Documentation Index
Overview Doc Doctor is a comprehensive documentation health check system designed to ensure high-quality, consistent documentation across the MCP project. It performs a variety of checks on documentation content, structure, and metadata to identify issues and provide actionable feedback.
Concept Think of Doc Doctor as a medical professional for your documentation - it performs routine check-ups, diagnoses issues, and provides treatment recommendations to keep your documentation healthy.</description></item><item><title>Documentation Compliance Check for Hugo Migration</title><link>https://example.github.io/mcp-scope/documentation-compliance-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/documentation-compliance-check/</guid><description>Documentation Compliance Check for Hugo Migration üü¢ Active
Overview This document verifies that all files created for the Hugo static site migration comply with the project&amp;rsquo;s documentation standards and follow the established plans. It serves as a quality assurance checkpoint before proceeding with full-scale content migration.
File Compliance Matrix Configuration Files File Standard Compliance Comments config/_default/config.toml ‚úÖ Compliant Correctly defines taxonomies, permalinks, menus, and parameters config/development/config.toml ‚úÖ Compliant Contains appropriate development-specific overrides config/production/config.</description></item><item><title>Documentation Directory Structure</title><link>https://example.github.io/mcp-scope/project/documentation-directory-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/documentation-directory-structure/</guid><description>Documentation Directory Structure ‚Ü©Ô∏è Back to Documentation Index
Overview This document provides a visual representation of the MCP documentation system&amp;rsquo;s directory structure. It serves as a map for navigating and maintaining the documentation.
Complete Directory Structure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 docs/ ‚îú‚îÄ‚îÄ README.</description></item><item><title>Documentation Guidelines</title><link>https://example.github.io/mcp-scope/standards/documentation-guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/standards/documentation-guidelines/</guid><description>Documentation Guidelines ‚Ü©Ô∏è Back to Documentation Index
Overview This document establishes the standards and best practices for creating and maintaining documentation for the Multi-Agent Control Platform (MCP). Following these guidelines ensures that our documentation remains consistent, accessible, and valuable throughout the project lifecycle.
Document Structure Standard Sections All technical documents should include these sections where applicable:
Overview: Brief introduction to the document&amp;rsquo;s purpose and content Prerequisites: Any information or setup required before using the document Main Content: The primary technical information (architecture, implementation, etc.</description></item><item><title>Documentation Migration Plan</title><link>https://example.github.io/mcp-scope/project/documentation-migration-plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/documentation-migration-plan/</guid><description>Documentation Migration Plan ‚Ü©Ô∏è Back to Documentation Index
Overview This document outlines the plan for migrating existing Multi-Agent Control Platform (MCP) documentation to the new standardized documentation system. The migration will ensure all technical content adheres to the established structure and standards while preserving valuable information.
Current Documentation State The MCP project currently has several key architecture documents:
README.md - Project overview first-steps.md - Initial setup instructions current-plan.md - Strategic plan architecture/fsm-agent-interfaces.</description></item><item><title>Dual-Layer Project Organization</title><link>https://example.github.io/mcp-scope/project/project-organization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/project-organization/</guid><description>Dual-Layer Project Organization üü¢ Active
‚Ü©Ô∏è Back to Documentation Hub
Overview The ScopeCam MCP project uses a dual-layer architecture for both code and documentation. This document clarifies this organizational approach to ensure consistent development and documentation practices across the project.
Dual-Layer Project Structure The project is organized into two distinct but related layers:
Layer Purpose Primary Path Documentation Path Root Project Layer ScopeCam project that integrates MCP for microscope control /home/verlyn13/Projects/mcp-scope/ /docs/ MCP Implementation Layer Multi-Agent Control Platform implementation /home/verlyn13/Projects/mcp-scope/mcp-project/ /mcp-project/docs/ Visual Representation of Layers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /home/verlyn13/Projects/mcp-scope/ # ROOT PROJECT LAYER ‚îú‚îÄ‚îÄ README.</description></item><item><title>Getting Started with MCP</title><link>https://example.github.io/mcp-scope/mcp/mcp/first-steps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/first-steps/</guid><description>Getting Started with MCP üü¢ Active
‚Ü©Ô∏è Back to Documentation Index
Overview Welcome to the Multi-Agent Control Platform (MCP) project! This guide will help you set up your development environment and understand the project structure so you can start contributing quickly.
Prerequisites JDK 17 or later for Kotlin components Python 3.11 or later for Python agents Gradle 8.0+ for building JVM components (or use the wrapper) NATS Server for local message transport Podman or Docker (optional, for containerized development) What is MCP?</description></item><item><title>Hugo Containerized Setup for MCP Documentation</title><link>https://example.github.io/mcp-scope/hugo-containerized-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-containerized-setup/</guid><description>Hugo Containerized Setup for MCP Documentation üü¢ Active
‚Ü©Ô∏è Back to Hugo Migration Executive Summary
Overview This document outlines how to integrate the Hugo static site documentation system with the existing ScopeCam MCP containerized development environment. It provides configuration details for developing, testing, and building the documentation site in a containerized environment consistent with the project&amp;rsquo;s established patterns.
Prerequisites Familiarity with the Containerized Development Environment Docker or Podman installed locally Basic understanding of the Hugo static site generator Access to the project repository Container Configuration Dockerfile for Hugo Development Create a Dockerfile.</description></item><item><title>Hugo Implementation Verification</title><link>https://example.github.io/mcp-scope/hugo-implementation-verification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-implementation-verification/</guid><description>Hugo Implementation Verification üü¢ Active
Overview This document provides a comprehensive verification of the Hugo implementation for the ScopeCam MCP documentation site. It confirms that all requirements from the migration plan have been met and that the implementation is ready for full-scale content migration.
Requirements Verification 1. Documentation Structure Requirements Requirement Status Evidence Preserve dual-layer structure ‚úÖ Implemented Content directories organized into root and MCP layers with layer-specific navigation Maintain content hierarchy ‚úÖ Implemented Section directories created with appropriate nesting and _index.</description></item><item><title>Hugo Migration Content Checklist</title><link>https://example.github.io/mcp-scope/hugo-migration-checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-migration-checklist/</guid><description>Hugo Migration Content Checklist üü¢ Active
Overview This checklist provides a step-by-step guide for migrating existing documentation to the Hugo static site framework. It ensures consistent application of standards and proper conversion of content during the migration process.
Pre-Migration Preparation Document Inventory Review the Hugo Migration File Mapping document Identify all documents to be migrated in the current documentation Verify the mapping for each document to its new location in the Hugo structure Create a prioritized list of documents to migrate Document any dependencies between documents (cross-references) Environment Setup Ensure the Hugo environment is properly set up according to Hugo Implementation Steps Verify that the containerized environment is working as expected Test the Hugo server with existing sample content Ensure you have appropriate editor with Markdown preview capability Content Migration Process Step 1: Section Structure Setup Create section index files (_index.</description></item><item><title>Hugo Migration Implementation Steps</title><link>https://example.github.io/mcp-scope/hugo-implementation-steps-update/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-implementation-steps-update/</guid><description>Hugo Migration Implementation Steps üü¢ Active
‚Ü©Ô∏è Back to Hugo Migration Executive Summary
Overview This document provides a detailed, step-by-step guide for implementing the ScopeCam MCP documentation migration to Hugo. The implementation process is designed to integrate seamlessly with the project&amp;rsquo;s existing containerized development environment and automation frameworks.
Prerequisites Access to the ScopeCam MCP repository Familiarity with the Containerized Development Environment Docker or Podman installed locally Basic understanding of Hugo Git and GitHub access Phase 1: Foundation Setup 1.</description></item><item><title>Hugo Migration Implementation Summary</title><link>https://example.github.io/mcp-scope/hugo-implementation-summary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-implementation-summary/</guid><description>Hugo Migration Implementation Summary Status: Active Overview This document provides a summary of the Hugo static site implementation for the ScopeCam MCP documentation. Phase 1 of the migration has been successfully completed, providing a solid foundation for the project&amp;rsquo;s documentation in Hugo format.
Implementation Status Component Status Completion Hugo Framework Setup üü¢ Complete 100% Theme Development üü¢ Complete 100% Content Migration - Phase 1 üü¢ Complete 100% Content Migration - Overall üü° In Progress 29% Deployment Configuration üü¢ Complete 100% Quality Verification üü¢ Complete 100% Core Components Implemented 1.</description></item><item><title>Hugo Migration Progress Tracking</title><link>https://example.github.io/mcp-scope/migration-progress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/migration-progress/</guid><description>Hugo Migration Progress Tracking üü¢ Active
Overview This document tracks the progress of migrating ScopeCam MCP documentation to the Hugo static site framework. It provides real-time status updates on the migration process based on the prioritization plan.
Migration Progress Summary Phase Total Documents Migrated Progress Phase 1: Core Navigation and Entry Points 13 13 100% Phase 2: Essential Technical Documentation 12 8 67% Phase 3: Supporting Documentation 17 0 0% Phase 4: Templates and References 3 0 0% Overall Total 45 21 47% Detailed Migration Status Phase 1: Core Navigation and Entry Points ‚úÖ Document Status Date Completed Notes /docs/README.</description></item><item><title>Hugo Shortcodes Reference for ScopeCam Documentation</title><link>https://example.github.io/mcp-scope/hugo-shortcodes-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-shortcodes-reference/</guid><description>Hugo Shortcodes Reference for ScopeCam Documentation üü¢ Active
Overview This document provides a reference guide for the custom Hugo shortcodes available in the ScopeCam MCP documentation site. Shortcodes allow for consistent application of special formatting and components across the documentation.
What Are Shortcodes? Shortcodes are special Hugo constructs that provide a simple way to extend Markdown&amp;rsquo;s capabilities. They allow for inserting complex content or formatting without resorting to HTML, ensuring consistency across the documentation.</description></item><item><title>Hugo Site Plan</title><link>https://example.github.io/mcp-scope/hugo-site-plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-site-plan/</guid><description>Hugo Site Plan Status: Active This document outlines the plan for implementing the Hugo-based documentation site for the MCP project.
Site Requirements Core Requirements Two Documentation Layers
Root Documentation Layer (all MCP documentation) MCP Core Documentation (specific to MCP core components) Section Organization
Project (project management, plans, etc.) Architecture (architectural decisions, components) Implementation (practical guides, code structure) Standards (guidelines, coding standards) Templates (reusable documentation templates) Tools (documentation tooling guides) Content Management</description></item><item><title>Hugo Theme Design</title><link>https://example.github.io/mcp-scope/hugo-theme-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-theme-design/</guid><description>Hugo Theme Design Status: Active This document outlines the design specifications for the MCP documentation Hugo theme.
Design Objectives The theme design is guided by these primary objectives:
Readability: Ensure all documentation is easy to read and navigate Consistency: Maintain consistent styling and interaction patterns Accessibility: Ensure documentation is accessible to all users Performance: Keep the site fast and lightweight Maintainability: Create a design that is easy to maintain and extend Design Strategy The theme will follow these design principles:</description></item><item><title>Issues Registry</title><link>https://example.github.io/mcp-scope/project/issues-registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/issues-registry/</guid><description>Issues Registry ‚Ü©Ô∏è Back to Documentation Index
Overview The Issues Registry is a central catalog of known issues, limitations, pitfalls, and technical challenges in the Multi-Agent Control Platform (MCP). This document helps developers avoid common problems and provides solutions or workarounds where available.
Using This Registry Issues are categorized by component or system area Each issue has a unique identifier (e.g., MCP-ARCH-001) Status indicators show if issues are open, being addressed, or resolved Cross-references link to technical documentation with more details Status Indicators Status Description üî¥ Open Known issue without a complete solution üü† In Progress Issue being actively addressed üü° Mitigated Partial solution or workaround available üü¢ Resolved Issue has been completely resolved ‚ö´ Won&amp;rsquo;t Fix Issue acknowledged but won&amp;rsquo;t be addressed Core Architecture Issues MCP-ARCH-001: FSM Complexity with Many Agents Status: üü° Mitigated</description></item><item><title>MCP Architecture Overview</title><link>https://example.github.io/mcp-scope/architecture/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/architecture/overview/</guid><description>MCP Architecture Overview ‚Ü©Ô∏è Back to Documentation Index
Overview The Multi-Agent Control Platform (MCP) is a distributed system designed to streamline and automate Android UVC camera development processes. It employs a Finite State Machine (FSM) architecture with a central orchestrator that manages specialized agents through a lightweight messaging system.
This document provides a high-level overview of the system architecture, guiding principles, and references to detailed component specifications.
Key Architecture Goals The MCP architecture aims to achieve the following objectives:</description></item><item><title>MCP Architecture Overview</title><link>https://example.github.io/mcp-scope/mcp/mcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/overview/</guid><description>MCP Architecture Overview üü¢ Active
‚Ü©Ô∏è Back to Documentation Index
Overview This document provides a comprehensive overview of the Multi-Agent Control Platform (MCP) architecture, explaining the core components, their interactions, and the underlying design principles.
System Architecture The MCP system follows a message-driven, distributed architecture built around a central orchestrator and specialized agents:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚îÇ ‚îÇ Android Application ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ HTTP/WebSocket ‚ñº ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ MCP Orchestrator ‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚îÇ ‚îÇ ‚îÇ FSM Engine ‚îÇ ‚îÇ ‚îÇ Agent ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚îÇ Registration ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚îÇ NATS ‚îÇ ‚ñº ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚îÇ Agent Framework ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚îÇ ‚îÇAgent 1‚îÇ ‚îÇAgent2‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò Key Components MCP Orchestrator</description></item><item><title>MCP Containerized Development Environment</title><link>https://example.github.io/mcp-scope/guides/containerized-dev-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/containerized-dev-environment/</guid><description>Containerized Development Environment for MCP ‚Ü©Ô∏è Back to Start Here | ‚Ü©Ô∏è Back to Documentation Index
Overview This guide details the recommended containerized development environment for the Multi-Agent Control Platform (MCP) using Podman and Podman Compose. This setup provides environment consistency, isolation, and resource efficiency while maintaining development speed.
Why Podman? Podman is particularly well-suited for the MCP development on Fedora Linux for several key reasons:
Lower Resource Overhead: Podman is a daemonless container engine that consumes fewer resources than Docker&amp;rsquo;s daemon-based approach Native to Fedora: Podman comes pre-installed or easily available on Fedora, making it a natural fit Docker Compose Compatibility: Podman supports Docker Compose files through podman-compose Rootless Containers: Podman allows running containers without root privileges, improving security Systemd Integration: Better integration with Linux systemd for service management Prerequisites Before setting up the containerized environment, ensure you have the following installed:</description></item><item><title>MCP Containerized Development Guide</title><link>https://example.github.io/mcp-scope/mcp/mcp/containerized-development-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/containerized-development-guide/</guid><description>MCP Containerized Development Guide üü¢ Active
‚Ü©Ô∏è Back to Documentation Index
Overview This guide explains how to use the containerized development environment for the Multi-Agent Control Platform (MCP). Containerization ensures consistent behavior across different development machines and production environments.
Prerequisites Podman (recommended) or Docker Podman Compose or Docker Compose 1 2 3 4 5 6 # Install on Fedora/RHEL sudo dnf install -y podman podman-compose # Verify installation podman --version podman-compose --version Benefits of Containerized Development Environment Consistency: Identical development environments across all systems Dependency Isolation: No conflicts between project dependencies Service Orchestration: All components start in the correct order Resource Management: Easy cleanup and resource allocation Cross-Platform: Works the same on Linux, macOS, and Windows Container Architecture The containerized environment consists of these services:</description></item><item><title>MCP Development Environment Setup</title><link>https://example.github.io/mcp-scope/mcp/mcp/project-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/project-setup/</guid><description>MCP Development Environment Setup üü¢ Active
‚Ü©Ô∏è Back to Documentation Index
Overview This guide explains how to set up consistent development environments for the Multi-Agent Control Platform (MCP) project, supporting both local development and containerized deployments.
Prerequisites JDK 17+ for Kotlin/Java components Python 3.11+ for Python agents NATS server for message passing Podman or Docker (optional, for containerized development) Local Development Environment Setup 1. Kotlin/JVM Components Setup We recommend using SDKMAN for managing JDK and Kotlin installations:</description></item><item><title>MCP Documentation Entry Point</title><link>https://example.github.io/mcp-scope/start_here/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/start_here/</guid><description>START HERE: Multi-Agent Control Platform Documentation Welcome to the MCP Documentation System This document is the mandatory first stop for all team members working on the Multi-Agent Control Platform. It will direct you to the information you need based on your role and the current project focus.
Current Project Focus üîç CURRENT FOCUS: Phase 1 Implementation - Core Infrastructure
We are currently focused on implementing the core infrastructure components of the MCP platform, including the FSM framework, agent interfaces, NATS messaging integration, and basic health monitoring.</description></item><item><title>MCP Documentation Index</title><link>https://example.github.io/mcp-scope/mcp/mcp/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/readme/</guid><description>MCP Documentation Index üü¢ Active
‚Ü©Ô∏è Back to MCP Project | ‚Ü©Ô∏è Back to Documentation Hub
Overview This is the documentation index for the Multi-Agent Control Platform (MCP) implementation. This index serves as the starting point for all MCP-specific technical documentation.
Documentation Layer Context This documentation is part of the MCP Implementation Layer in our dual-layer documentation structure:
1 2 3 4 /home/verlyn13/Projects/mcp-scope/ # ROOT PROJECT LAYER ‚îú‚îÄ‚îÄ docs/ # Root documentation layer ‚îî‚îÄ‚îÄ mcp-project/ # MCP IMPLEMENTATION LAYER ‚îî‚îÄ‚îÄ docs/ # THIS DOCUMENTATION LAYER For information about the overall ScopeCam project and project organization, please refer to the Root Documentation Hub.</description></item><item><title>MCP Health Monitoring Guide</title><link>https://example.github.io/mcp-scope/guides/health-monitoring-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/health-monitoring-guide/</guid><description>MCP Health Monitoring Guide ‚Ü©Ô∏è Back to Start Here | ‚Ü©Ô∏è Back to Documentation Index
Overview This guide documents the health monitoring system implemented for the Multi-Agent Control Platform (MCP). The health monitoring system provides real-time metrics collection, health status reporting, and resilience mechanisms to ensure system reliability and observability.
Health Monitoring Components System Architecture The health monitoring system consists of the following components:
SystemMetricsCollector: Collects JVM and system-level metrics HealthCheckService: Provides health check endpoints and manages agent health status Circuit Breaker Pattern: Prevents cascading failures during outages Agent State Monitoring: Tracks agent state transitions for health assessment NATS Health Endpoints: For querying system and agent health status Metrics Collection The SystemMetricsCollector gathers various system and JVM metrics:</description></item><item><title>MCP Local Development Guide</title><link>https://example.github.io/mcp-scope/mcp/mcp/local-development-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/local-development-guide/</guid><description>MCP Local Development Guide üü¢ Active
‚Ü©Ô∏è Back to Documentation Index
Overview This guide provides instructions for setting up and working with the Multi-Agent Control Platform (MCP) in a local development environment.
Prerequisites Before following this guide, ensure you have completed the Project Setup to install required software.
Setting Up Your Local Environment Gradle Wrapper Setup for Kotlin Projects To ensure consistent builds across developer machines, we use Gradle wrapper. If you&amp;rsquo;re creating a new Kotlin component or the wrapper is missing, set it up:</description></item><item><title>MCP Testing Guide</title><link>https://example.github.io/mcp-scope/guides/testing-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/testing-guide/</guid><description>MCP Testing Guide ‚Ü©Ô∏è Back to Start Here | ‚Ü©Ô∏è Back to Documentation Index
Overview This guide documents the testing infrastructure for the Multi-Agent Control Platform (MCP). It covers unit testing, integration testing, and health monitoring tests. The guide also provides best practices for writing new tests and running tests in both local and containerized environments.
Testing Infrastructure The MCP project uses the following testing libraries:
JUnit 5: Core testing framework Mockk: Mocking library for Kotlin Kotlin Test: Assertions and test utilities Kotlinx Coroutines Test: Utilities for testing coroutines The testing configuration is defined in the Gradle build files:</description></item><item><title>Path Reference Guide</title><link>https://example.github.io/mcp-scope/project/path-reference-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/path-reference-guide/</guid><description>Path Reference Guide üü¢ Active
‚Ü©Ô∏è Back to Documentation Hub
Overview This quick reference guide provides clear examples for correct path references across the dual-layer structure of the ScopeCam MCP project, eliminating path confusion once and for all.
Project Base Directories Layer Absolute Path Repository-Relative Path Root Project /home/verlyn13/Projects/mcp-scope / MCP Implementation /home/verlyn13/Projects/mcp-scope/mcp-project /mcp-project Documentation Directories Documentation Absolute Path Repository-Relative Path Root Documentation /home/verlyn13/Projects/mcp-scope/docs /docs MCP Documentation /home/verlyn13/Projects/mcp-scope/mcp-project/docs /mcp-project/docs Path Reference Examples ‚úÖ Correct Path References From Root Documentation to Root Documentation 1 [Project Organization](/docs/project/project-organization.</description></item><item><title>Phase 1 Content Verification</title><link>https://example.github.io/mcp-scope/phase1-verification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/phase1-verification/</guid><description>Phase 1 Content Verification üü¢ Active
Overview This document provides a comprehensive verification of all content migrated during Phase 1 of the Hugo static site implementation. Before proceeding to Phase 2, we need to ensure all created content meets the project&amp;rsquo;s documentation standards.
Document Verification Checklist The following verification has been performed on all Phase 1 documents:
Front Matter Compliance Document Title Status Version Dates Contributors Related Docs Tags Result /content/_index.</description></item><item><title>ScopeCam MCP Documentation Hub</title><link>https://example.github.io/mcp-scope/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/readme/</guid><description>ScopeCam MCP Documentation Hub üü¢ Active
‚Ü©Ô∏è Back to Project Root
Documentation Organization Overview The ScopeCam MCP project uses a dual-layer documentation structure that mirrors the code organization:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 /home/verlyn13/Projects/mcp-scope/ # ROOT PROJECT LAYER ‚îú‚îÄ‚îÄ README.md # Root project dashboard ‚îú‚îÄ‚îÄ docs/ # ROOT DOCUMENTATION LAYER ‚îÇ ‚îú‚îÄ‚îÄ README.md # This document - Navigation hub ‚îÇ ‚îú‚îÄ‚îÄ project/ # Project-level information ‚îÇ ‚îî‚îÄ‚îÄ guides/ # Implementation and technical guides ‚îî‚îÄ‚îÄ mcp-project/ # MCP IMPLEMENTATION LAYER ‚îú‚îÄ‚îÄ README.</description></item><item><title>ScopeCam MCP Documentation: Hugo Migration Executive Summary</title><link>https://example.github.io/mcp-scope/hugo-migration-executive-summary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-migration-executive-summary/</guid><description>ScopeCam MCP Documentation: Hugo Migration Executive Summary üü¢ Active
‚Ü©Ô∏è Back to Documentation Index
Overview This document provides an executive summary of the comprehensive plan to migrate the ScopeCam MCP documentation to a Hugo-based static site deployed on GitHub Pages. The migration will preserve the current dual-layer documentation structure while enhancing it with Hugo&amp;rsquo;s capabilities for organization, navigation, presentation, and search.
Key Benefits The migration to Hugo will provide the following benefits:</description></item><item><title>ScopeCam MCP Documentation: Hugo Migration Index</title><link>https://example.github.io/mcp-scope/hugo-migration-index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-migration-index/</guid><description>ScopeCam MCP Documentation: Hugo Migration Index üü¢ Active
‚Ü©Ô∏è Back to Documentation Index
Overview This document provides an index of all resources related to the migration of ScopeCam MCP documentation to a Hugo-based static site for GitHub Pages deployment. The migration has been carefully designed to preserve the existing documentation structure, align with project standards, and integrate with the containerized development environment.
Migration Documentation The migration plan consists of the following documents, each addressing a specific aspect of the migration process:</description></item><item><title>ScopeCam MCP Documentation: Hugo Migration Roles and Responsibilities</title><link>https://example.github.io/mcp-scope/hugo-migration-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-migration-roles/</guid><description>ScopeCam MCP Documentation: Hugo Migration Roles and Responsibilities üü¢ Active
‚Ü©Ô∏è Back to Hugo Migration Index
Overview This document defines the roles and responsibilities for implementing the Hugo documentation migration, specifically clarifying the division of responsibilities between the Documentation Architect and the Build Engineer. This collaboration model ensures that each specialist focuses on their area of expertise while working together toward a successful migration.
Role Division The migration to Hugo requires expertise in both documentation architecture and build engineering.</description></item></channel></rss>