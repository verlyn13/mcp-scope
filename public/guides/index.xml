<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guides on ScopeCam MCP Documentation</title><link>https://example.github.io/mcp-scope/guides/</link><description>Recent content in Guides on ScopeCam MCP Documentation</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://example.github.io/mcp-scope/guides/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://example.github.io/mcp-scope/guides/build-engineer-implementation-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/build-engineer-implementation-guide/</guid><description>Build Engineer Implementation Guide: Getting Started with MCP Overview This guide provides a clear path for the build engineer to begin implementation of the Multi-Agent Control Platform (MCP). It translates the architectural specifications into concrete setup steps and initial development tasks.
⚠️ IMPORTANT: The recommended development approach uses a containerized environment with Podman.
For the containerized setup, refer to the Containerized Development Environment guide.
This guide covers both containerized and traditional setup options.</description></item><item><title/><link>https://example.github.io/mcp-scope/guides/build-engineer-onboarding-checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/build-engineer-onboarding-checklist/</guid><description>Build Engineer Onboarding Checklist This checklist provides a streamlined sequence of tasks to help you get started with the MCP implementation. Use this alongside the more detailed Implementation Guide and Containerized Development Environment guide.
Containerized Development Environment Setup ⬅️ PRIORITY Install Podman and Podman Compose:
1 2 sudo dnf update -y sudo dnf install -y podman podman-compose Verify Podman installation:
1 2 podman --version podman-compose --version Create project directory structure:</description></item><item><title/><link>https://example.github.io/mcp-scope/guides/build-engineer-quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/build-engineer-quick-start/</guid><description>Build Engineer Quick Start Getting Started with MCP Implementation Welcome to the Multi-Agent Control Platform (MCP) project! This quick start guide will get you up and running quickly.
First Steps (Do This Now) Set up the containerized environment:
1 2 3 4 5 6 7 8 9 10 11 12 # Install Podman and Podman Compose sudo dnf install -y podman podman-compose # Clone the repository git clone https://github.com/example/mcp-project.git cd mcp-project # Create the containerization configuration (copy from guide) # See: /docs/guides/containerized-dev-environment.</description></item><item><title/><link>https://example.github.io/mcp-scope/guides/build-engineer-tech-specs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/build-engineer-tech-specs/</guid><description>MCP Technical Specifications - Build Engineer Reference This document provides essential technical specifications for implementing the Multi-Agent Control Platform (MCP). Use this as a quick reference alongside the implementation guide and architecture documents.
Core Architecture 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ┌─────────────────────┐ │ │ │ Android Application │ │ │ └─────────┬───────────┘ │ HTTP/WebSocket ▼ ┌─────────────────────┐ │ MCP Orchestrator │◄────┐ │ ┌───────────────┐ │ │ │ │ FSM Engine │ │ │ Agent │ └───────────────┘ │ │ Registration └─────────┬───────────┘ │ │ NATS │ ▼ │ ┌─────────────────────┐ │ │ Agent Framework │─────┘ │ ┌───────┐ ┌──────┐ │ │ │Agent 1│ │Agent2│ │ │ └───────┘ └──────┘ │ └─────────────────────┘ Key Interfaces McpAgent Interface 1 2 3 4 5 6 7 8 9 interface McpAgent { val agentId: String val capabilities: Set&amp;lt;Capability&amp;gt; suspend fun processTask(task: AgentTask): TaskResult fun getStatus(): AgentStatus suspend fun initialize() suspend fun shutdown() } Agent State Machine Agent lifecycle is managed through a Finite State Machine with these states:</description></item><item><title>MCP Containerized Development Environment</title><link>https://example.github.io/mcp-scope/guides/containerized-dev-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/containerized-dev-environment/</guid><description>Containerized Development Environment for MCP ↩️ Back to Start Here | ↩️ Back to Documentation Index
Overview This guide details the recommended containerized development environment for the Multi-Agent Control Platform (MCP) using Podman and Podman Compose. This setup provides environment consistency, isolation, and resource efficiency while maintaining development speed.
Why Podman? Podman is particularly well-suited for the MCP development on Fedora Linux for several key reasons:
Lower Resource Overhead: Podman is a daemonless container engine that consumes fewer resources than Docker&amp;rsquo;s daemon-based approach Native to Fedora: Podman comes pre-installed or easily available on Fedora, making it a natural fit Docker Compose Compatibility: Podman supports Docker Compose files through podman-compose Rootless Containers: Podman allows running containers without root privileges, improving security Systemd Integration: Better integration with Linux systemd for service management Prerequisites Before setting up the containerized environment, ensure you have the following installed:</description></item><item><title>MCP Health Monitoring Guide</title><link>https://example.github.io/mcp-scope/guides/health-monitoring-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/health-monitoring-guide/</guid><description>MCP Health Monitoring Guide ↩️ Back to Start Here | ↩️ Back to Documentation Index
Overview This guide documents the health monitoring system implemented for the Multi-Agent Control Platform (MCP). The health monitoring system provides real-time metrics collection, health status reporting, and resilience mechanisms to ensure system reliability and observability.
Health Monitoring Components System Architecture The health monitoring system consists of the following components:
SystemMetricsCollector: Collects JVM and system-level metrics HealthCheckService: Provides health check endpoints and manages agent health status Circuit Breaker Pattern: Prevents cascading failures during outages Agent State Monitoring: Tracks agent state transitions for health assessment NATS Health Endpoints: For querying system and agent health status Metrics Collection The SystemMetricsCollector gathers various system and JVM metrics:</description></item><item><title>MCP Testing Guide</title><link>https://example.github.io/mcp-scope/guides/testing-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/testing-guide/</guid><description>MCP Testing Guide ↩️ Back to Start Here | ↩️ Back to Documentation Index
Overview This guide documents the testing infrastructure for the Multi-Agent Control Platform (MCP). It covers unit testing, integration testing, and health monitoring tests. The guide also provides best practices for writing new tests and running tests in both local and containerized environments.
Testing Infrastructure The MCP project uses the following testing libraries:
JUnit 5: Core testing framework Mockk: Mocking library for Kotlin Kotlin Test: Assertions and test utilities Kotlinx Coroutines Test: Utilities for testing coroutines The testing configuration is defined in the Gradle build files:</description></item></channel></rss>