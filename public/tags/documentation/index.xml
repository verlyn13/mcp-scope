<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation on ScopeCam MCP Documentation</title><link>https://example.github.io/mcp-scope/tags/documentation/</link><description>Recent content in Documentation on ScopeCam MCP Documentation</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://example.github.io/mcp-scope/tags/documentation/index.xml" rel="self" type="application/rss+xml"/><item><title>Doc Doctor Guide</title><link>https://example.github.io/mcp-scope/doc-doctor-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/doc-doctor-guide/</guid><description>Doc Doctor: Documentation Health Check System Status: Active ‚Ü©Ô∏è Back to Tools | ‚Ü©Ô∏è Back to Documentation Index
Overview Doc Doctor is a comprehensive documentation health check system designed to ensure high-quality, consistent documentation across the MCP project. It performs a variety of checks on documentation content, structure, and metadata to identify issues and provide actionable feedback.
Concept Think of Doc Doctor as a medical professional for your documentation - it performs routine check-ups, diagnoses issues, and provides treatment recommendations to keep your documentation healthy.</description></item><item><title>Documentation Compliance Check for Hugo Migration</title><link>https://example.github.io/mcp-scope/documentation-compliance-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/documentation-compliance-check/</guid><description>Documentation Compliance Check for Hugo Migration üü¢ Active
Overview This document verifies that all files created for the Hugo static site migration comply with the project&amp;rsquo;s documentation standards and follow the established plans. It serves as a quality assurance checkpoint before proceeding with full-scale content migration.
File Compliance Matrix Configuration Files File Standard Compliance Comments config/_default/config.toml ‚úÖ Compliant Correctly defines taxonomies, permalinks, menus, and parameters config/development/config.toml ‚úÖ Compliant Contains appropriate development-specific overrides config/production/config.</description></item><item><title>Documentation Directory Structure</title><link>https://example.github.io/mcp-scope/project/documentation-directory-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/documentation-directory-structure/</guid><description>Documentation Directory Structure ‚Ü©Ô∏è Back to Documentation Index
Overview This document provides a visual representation of the MCP documentation system&amp;rsquo;s directory structure. It serves as a map for navigating and maintaining the documentation.
Complete Directory Structure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 docs/ ‚îú‚îÄ‚îÄ README.</description></item><item><title>Documentation Guidelines</title><link>https://example.github.io/mcp-scope/standards/documentation-guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/standards/documentation-guidelines/</guid><description>Documentation Guidelines ‚Ü©Ô∏è Back to Documentation Index
Overview This document establishes the standards and best practices for creating and maintaining documentation for the Multi-Agent Control Platform (MCP). Following these guidelines ensures that our documentation remains consistent, accessible, and valuable throughout the project lifecycle.
Document Structure Standard Sections All technical documents should include these sections where applicable:
Overview: Brief introduction to the document&amp;rsquo;s purpose and content Prerequisites: Any information or setup required before using the document Main Content: The primary technical information (architecture, implementation, etc.</description></item><item><title>Documentation Migration Plan</title><link>https://example.github.io/mcp-scope/project/documentation-migration-plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/documentation-migration-plan/</guid><description>Documentation Migration Plan ‚Ü©Ô∏è Back to Documentation Index
Overview This document outlines the plan for migrating existing Multi-Agent Control Platform (MCP) documentation to the new standardized documentation system. The migration will ensure all technical content adheres to the established structure and standards while preserving valuable information.
Current Documentation State The MCP project currently has several key architecture documents:
README.md - Project overview first-steps.md - Initial setup instructions current-plan.md - Strategic plan architecture/fsm-agent-interfaces.</description></item><item><title>Hugo Containerized Setup for MCP Documentation</title><link>https://example.github.io/mcp-scope/hugo-containerized-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-containerized-setup/</guid><description>Hugo Containerized Setup for MCP Documentation üü¢ Active
‚Ü©Ô∏è Back to Hugo Migration Executive Summary
Overview This document outlines how to integrate the Hugo static site documentation system with the existing ScopeCam MCP containerized development environment. It provides configuration details for developing, testing, and building the documentation site in a containerized environment consistent with the project&amp;rsquo;s established patterns.
Prerequisites Familiarity with the Containerized Development Environment Docker or Podman installed locally Basic understanding of the Hugo static site generator Access to the project repository Container Configuration Dockerfile for Hugo Development Create a Dockerfile.</description></item><item><title>Hugo Migration Content Checklist</title><link>https://example.github.io/mcp-scope/hugo-migration-checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-migration-checklist/</guid><description>Hugo Migration Content Checklist üü¢ Active
Overview This checklist provides a step-by-step guide for migrating existing documentation to the Hugo static site framework. It ensures consistent application of standards and proper conversion of content during the migration process.
Pre-Migration Preparation Document Inventory Review the Hugo Migration File Mapping document Identify all documents to be migrated in the current documentation Verify the mapping for each document to its new location in the Hugo structure Create a prioritized list of documents to migrate Document any dependencies between documents (cross-references) Environment Setup Ensure the Hugo environment is properly set up according to Hugo Implementation Steps Verify that the containerized environment is working as expected Test the Hugo server with existing sample content Ensure you have appropriate editor with Markdown preview capability Content Migration Process Step 1: Section Structure Setup Create section index files (_index.</description></item><item><title>Hugo Migration Implementation Steps</title><link>https://example.github.io/mcp-scope/hugo-implementation-steps-update/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-implementation-steps-update/</guid><description>Hugo Migration Implementation Steps üü¢ Active
‚Ü©Ô∏è Back to Hugo Migration Executive Summary
Overview This document provides a detailed, step-by-step guide for implementing the ScopeCam MCP documentation migration to Hugo. The implementation process is designed to integrate seamlessly with the project&amp;rsquo;s existing containerized development environment and automation frameworks.
Prerequisites Access to the ScopeCam MCP repository Familiarity with the Containerized Development Environment Docker or Podman installed locally Basic understanding of Hugo Git and GitHub access Phase 1: Foundation Setup 1.</description></item><item><title>Hugo Shortcodes Reference for ScopeCam Documentation</title><link>https://example.github.io/mcp-scope/hugo-shortcodes-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-shortcodes-reference/</guid><description>Hugo Shortcodes Reference for ScopeCam Documentation üü¢ Active
Overview This document provides a reference guide for the custom Hugo shortcodes available in the ScopeCam MCP documentation site. Shortcodes allow for consistent application of special formatting and components across the documentation.
What Are Shortcodes? Shortcodes are special Hugo constructs that provide a simple way to extend Markdown&amp;rsquo;s capabilities. They allow for inserting complex content or formatting without resorting to HTML, ensuring consistency across the documentation.</description></item><item><title>Hugo Site Plan</title><link>https://example.github.io/mcp-scope/hugo-site-plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-site-plan/</guid><description>Hugo Site Plan Status: Active This document outlines the plan for implementing the Hugo-based documentation site for the MCP project.
Site Requirements Core Requirements Two Documentation Layers
Root Documentation Layer (all MCP documentation) MCP Core Documentation (specific to MCP core components) Section Organization
Project (project management, plans, etc.) Architecture (architectural decisions, components) Implementation (practical guides, code structure) Standards (guidelines, coding standards) Templates (reusable documentation templates) Tools (documentation tooling guides) Content Management</description></item><item><title>Hugo Theme Design</title><link>https://example.github.io/mcp-scope/hugo-theme-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-theme-design/</guid><description>Hugo Theme Design Status: Active This document outlines the design specifications for the MCP documentation Hugo theme.
Design Objectives The theme design is guided by these primary objectives:
Readability: Ensure all documentation is easy to read and navigate Consistency: Maintain consistent styling and interaction patterns Accessibility: Ensure documentation is accessible to all users Performance: Keep the site fast and lightweight Maintainability: Create a design that is easy to maintain and extend Design Strategy The theme will follow these design principles:</description></item><item><title>MCP Documentation Index</title><link>https://example.github.io/mcp-scope/mcp/mcp/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/readme/</guid><description>MCP Documentation Index üü¢ Active
‚Ü©Ô∏è Back to MCP Project | ‚Ü©Ô∏è Back to Documentation Hub
Overview This is the documentation index for the Multi-Agent Control Platform (MCP) implementation. This index serves as the starting point for all MCP-specific technical documentation.
Documentation Layer Context This documentation is part of the MCP Implementation Layer in our dual-layer documentation structure:
1 2 3 4 /home/verlyn13/Projects/mcp-scope/ # ROOT PROJECT LAYER ‚îú‚îÄ‚îÄ docs/ # Root documentation layer ‚îî‚îÄ‚îÄ mcp-project/ # MCP IMPLEMENTATION LAYER ‚îî‚îÄ‚îÄ docs/ # THIS DOCUMENTATION LAYER For information about the overall ScopeCam project and project organization, please refer to the Root Documentation Hub.</description></item><item><title>ScopeCam MCP Documentation: Hugo Migration Executive Summary</title><link>https://example.github.io/mcp-scope/hugo-migration-executive-summary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-migration-executive-summary/</guid><description>ScopeCam MCP Documentation: Hugo Migration Executive Summary üü¢ Active
‚Ü©Ô∏è Back to Documentation Index
Overview This document provides an executive summary of the comprehensive plan to migrate the ScopeCam MCP documentation to a Hugo-based static site deployed on GitHub Pages. The migration will preserve the current dual-layer documentation structure while enhancing it with Hugo&amp;rsquo;s capabilities for organization, navigation, presentation, and search.
Key Benefits The migration to Hugo will provide the following benefits:</description></item><item><title>ScopeCam MCP Documentation: Hugo Migration Index</title><link>https://example.github.io/mcp-scope/hugo-migration-index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-migration-index/</guid><description>ScopeCam MCP Documentation: Hugo Migration Index üü¢ Active
‚Ü©Ô∏è Back to Documentation Index
Overview This document provides an index of all resources related to the migration of ScopeCam MCP documentation to a Hugo-based static site for GitHub Pages deployment. The migration has been carefully designed to preserve the existing documentation structure, align with project standards, and integrate with the containerized development environment.
Migration Documentation The migration plan consists of the following documents, each addressing a specific aspect of the migration process:</description></item><item><title>ScopeCam MCP Documentation: Hugo Migration Roles and Responsibilities</title><link>https://example.github.io/mcp-scope/hugo-migration-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-migration-roles/</guid><description>ScopeCam MCP Documentation: Hugo Migration Roles and Responsibilities üü¢ Active
‚Ü©Ô∏è Back to Hugo Migration Index
Overview This document defines the roles and responsibilities for implementing the Hugo documentation migration, specifically clarifying the division of responsibilities between the Documentation Architect and the Build Engineer. This collaboration model ensures that each specialist focuses on their area of expertise while working together toward a successful migration.
Role Division The migration to Hugo requires expertise in both documentation architecture and build engineering.</description></item></channel></rss>