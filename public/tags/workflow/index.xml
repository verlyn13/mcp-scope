<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Workflow on ScopeCam MCP Documentation</title><link>https://example.github.io/mcp-scope/tags/workflow/</link><description>Recent content in Workflow on ScopeCam MCP Documentation</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://example.github.io/mcp-scope/tags/workflow/index.xml" rel="self" type="application/rss+xml"/><item><title>MCP Containerized Development Guide</title><link>https://example.github.io/mcp-scope/mcp/mcp/containerized-development-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/containerized-development-guide/</guid><description>MCP Containerized Development Guide üü¢ Active
‚Ü©Ô∏è Back to Documentation Index
Overview This guide explains how to use the containerized development environment for the Multi-Agent Control Platform (MCP). Containerization ensures consistent behavior across different development machines and production environments.
Prerequisites Podman (recommended) or Docker Podman Compose or Docker Compose 1 2 3 4 5 6 # Install on Fedora/RHEL sudo dnf install -y podman podman-compose # Verify installation podman --version podman-compose --version Benefits of Containerized Development Environment Consistency: Identical development environments across all systems Dependency Isolation: No conflicts between project dependencies Service Orchestration: All components start in the correct order Resource Management: Easy cleanup and resource allocation Cross-Platform: Works the same on Linux, macOS, and Windows Container Architecture The containerized environment consists of these services:</description></item><item><title>MCP Local Development Guide</title><link>https://example.github.io/mcp-scope/mcp/mcp/local-development-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/local-development-guide/</guid><description>MCP Local Development Guide üü¢ Active
‚Ü©Ô∏è Back to Documentation Index
Overview This guide provides instructions for setting up and working with the Multi-Agent Control Platform (MCP) in a local development environment.
Prerequisites Before following this guide, ensure you have completed the Project Setup to install required software.
Setting Up Your Local Environment Gradle Wrapper Setup for Kotlin Projects To ensure consistent builds across developer machines, we use Gradle wrapper. If you&amp;rsquo;re creating a new Kotlin component or the wrapper is missing, set it up:</description></item></channel></rss>