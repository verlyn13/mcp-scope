<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Podman on ScopeCam MCP Documentation</title><link>https://example.github.io/mcp-scope/tags/podman/</link><description>Recent content in Podman on ScopeCam MCP Documentation</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://example.github.io/mcp-scope/tags/podman/index.xml" rel="self" type="application/rss+xml"/><item><title>MCP Containerized Development Environment</title><link>https://example.github.io/mcp-scope/guides/containerized-dev-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/containerized-dev-environment/</guid><description>Containerized Development Environment for MCP ‚Ü©Ô∏è Back to Start Here | ‚Ü©Ô∏è Back to Documentation Index
Overview This guide details the recommended containerized development environment for the Multi-Agent Control Platform (MCP) using Podman and Podman Compose. This setup provides environment consistency, isolation, and resource efficiency while maintaining development speed.
Why Podman? Podman is particularly well-suited for the MCP development on Fedora Linux for several key reasons:
Lower Resource Overhead: Podman is a daemonless container engine that consumes fewer resources than Docker&amp;rsquo;s daemon-based approach Native to Fedora: Podman comes pre-installed or easily available on Fedora, making it a natural fit Docker Compose Compatibility: Podman supports Docker Compose files through podman-compose Rootless Containers: Podman allows running containers without root privileges, improving security Systemd Integration: Better integration with Linux systemd for service management Prerequisites Before setting up the containerized environment, ensure you have the following installed:</description></item><item><title>MCP Containerized Development Guide</title><link>https://example.github.io/mcp-scope/mcp/mcp/containerized-development-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/containerized-development-guide/</guid><description>MCP Containerized Development Guide üü¢ Active
‚Ü©Ô∏è Back to Documentation Index
Overview This guide explains how to use the containerized development environment for the Multi-Agent Control Platform (MCP). Containerization ensures consistent behavior across different development machines and production environments.
Prerequisites Podman (recommended) or Docker Podman Compose or Docker Compose 1 2 3 4 5 6 # Install on Fedora/RHEL sudo dnf install -y podman podman-compose # Verify installation podman --version podman-compose --version Benefits of Containerized Development Environment Consistency: Identical development environments across all systems Dependency Isolation: No conflicts between project dependencies Service Orchestration: All components start in the correct order Resource Management: Easy cleanup and resource allocation Cross-Platform: Works the same on Linux, macOS, and Windows Container Architecture The containerized environment consists of these services:</description></item></channel></rss>