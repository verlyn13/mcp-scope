<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gradle on ScopeCam MCP Documentation</title><link>https://example.github.io/mcp-scope/tags/gradle/</link><description>Recent content in Gradle on ScopeCam MCP Documentation</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://example.github.io/mcp-scope/tags/gradle/index.xml" rel="self" type="application/rss+xml"/><item><title>MCP Containerized Development Environment</title><link>https://example.github.io/mcp-scope/guides/containerized-dev-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/containerized-dev-environment/</guid><description>Containerized Development Environment for MCP ‚Ü©Ô∏è Back to Start Here | ‚Ü©Ô∏è Back to Documentation Index
Overview This guide details the recommended containerized development environment for the Multi-Agent Control Platform (MCP) using Podman and Podman Compose. This setup provides environment consistency, isolation, and resource efficiency while maintaining development speed.
Why Podman? Podman is particularly well-suited for the MCP development on Fedora Linux for several key reasons:
Lower Resource Overhead: Podman is a daemonless container engine that consumes fewer resources than Docker&amp;rsquo;s daemon-based approach Native to Fedora: Podman comes pre-installed or easily available on Fedora, making it a natural fit Docker Compose Compatibility: Podman supports Docker Compose files through podman-compose Rootless Containers: Podman allows running containers without root privileges, improving security Systemd Integration: Better integration with Linux systemd for service management Prerequisites Before setting up the containerized environment, ensure you have the following installed:</description></item><item><title>MCP Local Development Guide</title><link>https://example.github.io/mcp-scope/mcp/mcp/local-development-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/local-development-guide/</guid><description>MCP Local Development Guide üü¢ Active
‚Ü©Ô∏è Back to Documentation Index
Overview This guide provides instructions for setting up and working with the Multi-Agent Control Platform (MCP) in a local development environment.
Prerequisites Before following this guide, ensure you have completed the Project Setup to install required software.
Setting Up Your Local Environment Gradle Wrapper Setup for Kotlin Projects To ensure consistent builds across developer machines, we use Gradle wrapper. If you&amp;rsquo;re creating a new Kotlin component or the wrapper is missing, set it up:</description></item><item><title>MCP Testing Guide</title><link>https://example.github.io/mcp-scope/guides/testing-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/testing-guide/</guid><description>MCP Testing Guide ‚Ü©Ô∏è Back to Start Here | ‚Ü©Ô∏è Back to Documentation Index
Overview This guide documents the testing infrastructure for the Multi-Agent Control Platform (MCP). It covers unit testing, integration testing, and health monitoring tests. The guide also provides best practices for writing new tests and running tests in both local and containerized environments.
Testing Infrastructure The MCP project uses the following testing libraries:
JUnit 5: Core testing framework Mockk: Mocking library for Kotlin Kotlin Test: Assertions and test utilities Kotlinx Coroutines Test: Utilities for testing coroutines The testing configuration is defined in the Gradle build files:</description></item></channel></rss>