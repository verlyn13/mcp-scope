<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ScopeCam MCP on ScopeCam MCP Documentation</title><link>https://example.github.io/mcp-scope/</link><description>Recent content in ScopeCam MCP on ScopeCam MCP Documentation</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://example.github.io/mcp-scope/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://example.github.io/mcp-scope/architecture/camera-integration-agent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/architecture/camera-integration-agent/</guid><description>Camera Integration Agent Specification Overview This document specifies the design of the Camera Integration Agent for the Multi-Agent Control Platform (MCP). This agent is responsible for detecting, communicating with, and managing USB UVC (USB Video Class) camera devices. It serves as the foundation for all camera-related operations in the platform.
Core Components 1. Camera Integration Agent Implementation The Camera Integration Agent implements the McpAgent interface and provides specialized camera functionality:</description></item><item><title/><link>https://example.github.io/mcp-scope/architecture/fsm-agent-interfaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/architecture/fsm-agent-interfaces/</guid><description>FSM Framework and Core Agent Interfaces Specification Overview This document specifies the design of the Finite State Machine (FSM) framework and core agent interfaces for the Multi-Agent Control Platform (MCP). These interfaces establish the foundation for all agent interactions and lifecycle management within the system.
Core Components 1. Agent State Model Agents in the MCP follow a well-defined lifecycle represented by the following states:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 sealed class AgentState { // Initial state after agent creation but before initialization object Idle : AgentState() // Agent is preparing resources, connections, and dependencies object Initializing : AgentState() // Agent is actively processing a task object Processing : AgentState() // Agent has encountered an error and may need intervention data class Error(val message: String, val exception: Exception?</description></item><item><title/><link>https://example.github.io/mcp-scope/architecture/health-monitoring-framework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/architecture/health-monitoring-framework/</guid><description>Health Monitoring and Resilience Framework Specification Overview This document specifies the design of the Health Monitoring and Resilience Framework for the Multi-Agent Control Platform (MCP). This framework ensures system stability, provides visibility into component health, and implements recovery mechanisms for fault tolerance.
Core Components 1. Health Monitoring Service The Health Monitoring Service regularly checks the health of all system components:
class HealthMonitoringService( private val natsConnection: Connection, private val orchestrator: Orchestrator, private val config: HealthMonitorConfig ) { private val logger = LoggerFactory.</description></item><item><title/><link>https://example.github.io/mcp-scope/architecture/implementation-roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/architecture/implementation-roadmap/</guid><description>Phase 1 Implementation Roadmap This document outlines the step-by-step implementation plan for Phase 1 of the Multi-Agent Control Platform (MCP) project. It provides a structured approach to building the core infrastructure components as defined in the architectural specifications.
Implementation Sequence Step 1: Project Setup (Estimated: 1-2 days) Create Project Structure
1 2 3 4 5 mkdir -p mcp-project/src/main/kotlin/com/example/mcp mkdir -p mcp-project/src/main/kotlin/com/example/agents mkdir -p mcp-project/src/main/resources mkdir -p mcp-project/src/test/kotlin/com/example/mcp mkdir -p mcp-project/nats Configure Gradle</description></item><item><title/><link>https://example.github.io/mcp-scope/architecture/orchestrator-nats-integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/architecture/orchestrator-nats-integration/</guid><description>Orchestrator and NATS Messaging Integration Specification Overview This document specifies the design of the Orchestrator component and NATS messaging integration for the Multi-Agent Control Platform (MCP). The Orchestrator is the central component responsible for managing agent lifecycles, distributing tasks, and monitoring system health. NATS provides the messaging infrastructure for efficient inter-component communication.
Core Components 1. Orchestrator Design The Orchestrator serves as the central coordination point for all agents in the system:</description></item><item><title/><link>https://example.github.io/mcp-scope/architecture/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/architecture/readme/</guid><description>Multi-Agent Control Platform (MCP) Architecture Overview The Multi-Agent Control Platform (MCP) is a distributed system designed to streamline and automate Android UVC camera development processes. It employs a Finite State Machine (FSM) architecture with a central orchestrator that manages specialized agents through a lightweight messaging system.
This document provides a high-level overview of the system architecture, guiding principles, and links to detailed component specifications.
System Architecture Diagram 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ┌─────────────────────────────────────────────────────────────────┐ │ Android Application │ └───────────────────────────┬─────────────────────────────────────┘ │ HTTP/WebSocket ▼ ┌─────────────────────────────────────────────────────────────────┐ │ MCP Core Orchestrator │ │ ┌─────────────────┐ ┌──────────────────┐ ┌───────────────┐ │ │ │ FSM │◄─►│ Task Scheduler │◄─►│Event Processor│ │ │ └─────────────────┘ └──────────────────┘ └───────────────┘ │ └───────────────────────────┬─────────────────────────────────────┘ │ NATS Messaging ▼ ┌─────────────────────────────────────────────────────────────────┐ │ Specialized Agents │ │ ┌─────────────────┐ ┌────────────┐ ┌───────────┐ ┌──────────┐ │ │ │ Camera │ │ Code │ │ Build │ │ Testing │ │ │ │ Integration │ │ Generation │ │ System │ │ │ │ │ └─────────────────┘ └────────────┘ └───────────┘ └──────────┘ │ │ │ │ ┌─────────────────┐ ┌────────────┐ ┌───────────────────────┐ │ │ │ Static │ │Documentation│ │ Future Agents.</description></item><item><title/><link>https://example.github.io/mcp-scope/current-plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/current-plan/</guid><description>Strategic Plan for Multi-Agent Control Platform (MCP) for Android UVC Camera Development Based on the comprehensive information provided, I&amp;rsquo;ve designed a strategic plan for implementing a Kotlin-based MCP with FSM/Agent architecture for your Android UVC camera project. This plan prioritizes performance, developer productivity, and cost-effectiveness for a solo developer environment.
1. Architecture Design: Kotlin-Centric FSM Orchestration Core Architecture I recommend implementing a centralized scheduler within the MCP server to manage the lifecycle of agents and scheduling their tasks.</description></item><item><title/><link>https://example.github.io/mcp-scope/deploy-readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/deploy-readme/</guid><description>MCP Documentation Deployment This document explains the two deployment options for the MCP documentation site to GitHub Pages.
Option 1: Local Deployment Script (Recommended) This repository uses a local deployment script that sources a GitHub Personal Access Token (PAT) from a local secrets file.
Prerequisites Ensure you have a GitHub PAT with these permissions:
Contents (read/write) - For pushing to the gh-pages branch Pages (read/write) - For GitHub Pages configuration Metadata (read) - For basic repository access Store your token in the local secrets file:</description></item><item><title/><link>https://example.github.io/mcp-scope/deployment-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/deployment-guide/</guid><description>MCP Documentation: Deployment Guide This guide explains the deployment options for the MCP documentation system and when to use each approach.
Deployment Options The system offers two deployment methods:
Container-based Deployment (mcp-docs.sh) Direct Deployment (direct-deploy.sh) Both methods accomplish the same result: building the Hugo site and deploying it to the gh-pages branch for GitHub Pages hosting.
When to Use Each Method Use Container-based Deployment When: You&amp;rsquo;re working in a containerized environment You want to ensure consistent Hugo version across different machines You don&amp;rsquo;t want to install Hugo locally Your network/system can access container registries 1 2 3 4 5 # Pre-cache images once during setup (recommended) .</description></item><item><title/><link>https://example.github.io/mcp-scope/deployment-reliability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/deployment-reliability/</guid><description>MCP Documentation System: Deployment Reliability Improvements This document describes the improvements made to enhance deployment reliability for the MCP Documentation System, focusing on container image handling and error recovery.
Container Registry Enhancements 1. Multiple Registry Support The system now tries multiple registries when pulling the Hugo image:
1 2 3 4 # Registry fallback sequence docker.io/klakegg/hugo:0.110-ext-alpine klakegg/hugo:0.110-ext-alpine docker.io/klakegg/hugo:latest-ext-alpine If one registry fails, the system automatically tries the next without user intervention.</description></item><item><title/><link>https://example.github.io/mcp-scope/documentation-maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/documentation-maintenance/</guid><description>MCP Documentation Maintenance Guide Overview This guide provides instructions for maintaining the MCP documentation system, including best practices for content creation, shortcode usage, and deployment procedures.
Documentation System Architecture The MCP documentation uses a dual approach:
Hugo Static Site Generator
Generates the final HTML site Provides structure and navigation Deploys to GitHub Pages Jinja2 Template System
Provides templates for standardized document creation Separates content from presentation Ensures consistent document structure Directory Structure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 / # Root directory ├── content/ # Hugo content │ ├── _index.</description></item><item><title/><link>https://example.github.io/mcp-scope/documentation-readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/documentation-readme/</guid><description>MCP Documentation System This documentation system combines Hugo static site generation with Jinja2 template-based content creation for the Multi-Agent Control Platform (MCP) project.
Quick Start 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Check prerequisites ./mcp-docs.sh check # Start Hugo development server ./mcp-docs.sh hugo server # Build static site ./mcp-docs.sh hugo build # Generate document from template ./mcp-docs.sh template generate templates/test.j2 template-data/test-data.json test-output.md # Deploy to GitHub Pages .</description></item><item><title/><link>https://example.github.io/mcp-scope/first-steps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/first-steps/</guid><description>First Steps for Multi-Agent Control Platform (MCP) Development This guide outlines the initial steps for both the architect and coder to begin developing the Multi-Agent Control Platform (MCP) for Android UVC camera development. It covers environment setup, project structure, and initial implementation tasks.
1. Environment Setup 1.1. Install Required Packages 1 2 3 4 5 6 sudo dnf update -y sudo dnf install -y git curl unzip \ java-17-openjdk-devel \ python3 python3-pip \ podman \ nats-server Note:</description></item><item><title/><link>https://example.github.io/mcp-scope/git-workflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/git-workflow/</guid><description>MCP Documentation Git Workflow This document explains the Git workflow for the MCP Documentation system, including branch management and deployment process.
Branch Structure The documentation system uses the following branch structure:
main: Development branch where all content and code changes are made. gh-pages: Deployment branch that contains the generated static site for GitHub Pages. Workflow Overview All development work happens on the main branch. The deployment script (./mcp-docs deploy) builds the site and pushes to the gh-pages branch.</description></item><item><title/><link>https://example.github.io/mcp-scope/github-workflow-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/github-workflow-setup/</guid><description>GitHub Actions Workflow for Hugo Deployment This document provides the GitHub Actions workflow configuration for automatic building and deploying the Hugo static site to GitHub Pages.
Workflow Configuration Create a file in your repository at .github/workflows/hugo-deploy.yml with the following content:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 name: Deploy Hugo Site to GitHub Pages on: push: branches: - main # Set this to your default branch workflow_dispatch: # Allow manual triggering permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment concurrency: group: &amp;#34;pages&amp;#34; cancel-in-progress: true # Default to bash defaults: run: shell: bash jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 with: submodules: recursive fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#39;0.</description></item><item><title/><link>https://example.github.io/mcp-scope/guides/build-engineer-implementation-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/build-engineer-implementation-guide/</guid><description>Build Engineer Implementation Guide: Getting Started with MCP Overview This guide provides a clear path for the build engineer to begin implementation of the Multi-Agent Control Platform (MCP). It translates the architectural specifications into concrete setup steps and initial development tasks.
⚠️ IMPORTANT: The recommended development approach uses a containerized environment with Podman.
For the containerized setup, refer to the Containerized Development Environment guide.
This guide covers both containerized and traditional setup options.</description></item><item><title/><link>https://example.github.io/mcp-scope/guides/build-engineer-onboarding-checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/build-engineer-onboarding-checklist/</guid><description>Build Engineer Onboarding Checklist This checklist provides a streamlined sequence of tasks to help you get started with the MCP implementation. Use this alongside the more detailed Implementation Guide and Containerized Development Environment guide.
Containerized Development Environment Setup ⬅️ PRIORITY Install Podman and Podman Compose:
1 2 sudo dnf update -y sudo dnf install -y podman podman-compose Verify Podman installation:
1 2 podman --version podman-compose --version Create project directory structure:</description></item><item><title/><link>https://example.github.io/mcp-scope/guides/build-engineer-quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/build-engineer-quick-start/</guid><description>Build Engineer Quick Start Getting Started with MCP Implementation Welcome to the Multi-Agent Control Platform (MCP) project! This quick start guide will get you up and running quickly.
First Steps (Do This Now) Set up the containerized environment:
1 2 3 4 5 6 7 8 9 10 11 12 # Install Podman and Podman Compose sudo dnf install -y podman podman-compose # Clone the repository git clone https://github.com/example/mcp-project.git cd mcp-project # Create the containerization configuration (copy from guide) # See: /docs/guides/containerized-dev-environment.</description></item><item><title/><link>https://example.github.io/mcp-scope/guides/build-engineer-tech-specs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/build-engineer-tech-specs/</guid><description>MCP Technical Specifications - Build Engineer Reference This document provides essential technical specifications for implementing the Multi-Agent Control Platform (MCP). Use this as a quick reference alongside the implementation guide and architecture documents.
Core Architecture 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ┌─────────────────────┐ │ │ │ Android Application │ │ │ └─────────┬───────────┘ │ HTTP/WebSocket ▼ ┌─────────────────────┐ │ MCP Orchestrator │◄────┐ │ ┌───────────────┐ │ │ │ │ FSM Engine │ │ │ Agent │ └───────────────┘ │ │ Registration └─────────┬───────────┘ │ │ NATS │ ▼ │ ┌─────────────────────┐ │ │ Agent Framework │─────┘ │ ┌───────┐ ┌──────┐ │ │ │Agent 1│ │Agent2│ │ │ └───────┘ └──────┘ │ └─────────────────────┘ Key Interfaces McpAgent Interface 1 2 3 4 5 6 7 8 9 interface McpAgent { val agentId: String val capabilities: Set&amp;lt;Capability&amp;gt; suspend fun processTask(task: AgentTask): TaskResult fun getStatus(): AgentStatus suspend fun initialize() suspend fun shutdown() } Agent State Machine Agent lifecycle is managed through a Finite State Machine with these states:</description></item><item><title/><link>https://example.github.io/mcp-scope/hugo-config-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-config-setup/</guid><description>Hugo Configuration Setup This document provides the initial Hugo configuration for the ScopeCam MCP documentation site. It includes the basic config.toml file and instructions for customizing it for your deployment.
Base Configuration File Create a file named config.toml in the root of your Hugo project with the following content:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 # ScopeCam MCP Documentation Hugo Configuration baseURL = &amp;#34;https://example.</description></item><item><title/><link>https://example.github.io/mcp-scope/hugo-implementation-steps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-implementation-steps/</guid><description>Hugo Migration Implementation Steps This document provides a step-by-step guide for implementing the ScopeCam MCP documentation migration to Hugo. Follow these instructions to create the Hugo static site structure, migrate content, and deploy to GitHub Pages.
Phase 1: Project Setup 1.1 Create the Hugo Project 1 2 3 4 5 6 7 8 9 10 11 12 13 # Install Hugo # For Linux: sudo apt install hugo # For macOS: brew install hugo # Create a new Hugo site hugo new site mcp-docs cd mcp-docs # Initialize Git repository (if not already in one) git init 1.</description></item><item><title/><link>https://example.github.io/mcp-scope/hugo-jinja2-integration-summary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-jinja2-integration-summary/</guid><description>MCP Documentation: Hugo Migration with Jinja2 Integration Summary This document summarizes the completion of the Multi-Agent Control Platform (MCP) documentation migration to Hugo static site generator, along with the integration of Jinja2 templating for dynamic content generation.
Migration Status Overall documentation migration: 93% complete
Phase Description Status Completion Phase 1 Foundation Setup Complete 100% Phase 2 Essential Technical Documentation Complete 100% Phase 3 Supporting Documentation In Progress 82% Phase 4 Templates Complete 100% Accomplished Tasks 1.</description></item><item><title/><link>https://example.github.io/mcp-scope/hugo-migration-file-mapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-migration-file-mapping/</guid><description>ScopeCam MCP Documentation to Hugo Migration File Mapping This document provides a comprehensive mapping of the current documentation files to their locations in the Hugo site structure. This will serve as a guide during the migration process.
Current vs. Hugo Path Mapping Current Path Hugo Path Notes /README.md /content/_index.md Site homepage /docs/README.md /content/docs/_index.md Documentation index /docs/START_HERE.md /content/getting-started.md Entry point Root Documentation Layer Current Path Hugo Path Notes /docs/project/current-focus.md /content/project/current-focus.md /docs/project/documentation-directory-structure.md /content/project/documentation-directory-structure.</description></item><item><title/><link>https://example.github.io/mcp-scope/hugo-readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-readme/</guid><description>ScopeCam MCP Documentation - Hugo Static Site This directory contains a Hugo-based static site for the ScopeCam MCP Documentation, designed to be deployed to GitHub Pages.
About the Documentation Site The documentation site preserves the current dual-layer structure of the ScopeCam MCP documentation:
Root Documentation Layer - Project-wide information and ScopeCam integration MCP Documentation Layer - Detailed MCP implementation guides and technical information The site includes features like:
Status indicators for document status (Active, Draft, Review, etc.</description></item><item><title/><link>https://example.github.io/mcp-scope/hugo-shortcode-inventory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-shortcode-inventory/</guid><description>Hugo Shortcode Inventory and Implementation Plan Overview This document catalogs all shortcodes used in the MCP documentation, their implementation status, and a plan to ensure all are properly supported.
Shortcode Inventory Shortcode Purpose Status Files Using Template Path toc Table of Contents ✅ Created health-monitoring-guide.md themes/mcp-theme/layouts/shortcodes/toc.html callout Styled message boxes ⚠️ Exists but issues phase3-progress.md themes/mcp-theme/layouts/shortcodes/callout.html status Document status indicator ✅ Exists Multiple themes/mcp-theme/layouts/shortcodes/status.html progress Progress bar ✅ Exists Multiple themes/mcp-theme/layouts/shortcodes/progress.</description></item><item><title/><link>https://example.github.io/mcp-scope/hugo-site-readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-site-readme/</guid><description>ScopeCam MCP Documentation - Hugo Site This directory contains a Hugo-based static site implementation of the ScopeCam MCP documentation, designed for deployment on GitHub Pages.
Quick Start To work with this documentation site, you have several options:
Option 1: Use the test script 1 2 3 4 5 # Make the script executable if not already done chmod +x test-hugo.sh # Run the script (requires Hugo to be installed) ./test-hugo.sh Option 2: Use Docker/Podman 1 2 3 4 5 # Build the container docker build -t hugo-local -f Dockerfile.</description></item><item><title/><link>https://example.github.io/mcp-scope/mcp-project-clarification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp-project-clarification/</guid><description>Multi-Agent Control Platform (MCP) Project Clarification Overview This document clarifies the nature and scope of the Multi-Agent Control Platform (MCP) project to ensure proper understanding and documentation across all project materials.
Project Identity The Multi-Agent Control Platform (MCP) is a general-purpose server framework designed to:
Orchestrate multiple specialized software agents Facilitate communication between these agents using a standardized messaging system Provide a unified architecture for agent lifecycle management Monitor and report on system health and status Enable integration with various client applications Important Distinction MCP is not specifically tied to the ScopeCam project.</description></item><item><title/><link>https://example.github.io/mcp-scope/mcp/mcp/containerized-development-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/containerized-development-guide/</guid><description>MCP Containerized Development Guide This guide explains how to use the containerized development environment for the Multi-Agent Control Platform (MCP). Containerization ensures consistent behavior across different development machines and production environments.
Benefits of Containerized Development Environment Consistency: Identical development environments across all systems Dependency Isolation: No conflicts between project dependencies Service Orchestration: All components start in the correct order Resource Management: Easy cleanup and resource allocation Cross-Platform: Works the same on Linux, macOS, and Windows Prerequisites Podman (recommended) or Docker Podman Compose or Docker Compose 1 2 3 4 5 6 # Install on Fedora/RHEL sudo dnf install -y podman podman-compose # Verify installation podman --version podman-compose --version Container Architecture The containerized environment consists of these services:</description></item><item><title/><link>https://example.github.io/mcp-scope/mcp/mcp/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/contributing/</guid><description>Contributing to the Multi-Agent Control Platform Thank you for your interest in contributing to the MCP project! This document provides guidelines and workflows to make the contribution process smooth and effective.
Code of Conduct This project adheres to a Code of Conduct that sets expectations for participation in our community. By participating, you are expected to uphold this code. Please report unacceptable behavior to the project maintainers.
How Can I Contribute?</description></item><item><title/><link>https://example.github.io/mcp-scope/mcp/mcp/environment-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/environment-setup/</guid><description>MCP Development Environment Setup This guide explains how to set up consistent development environments for the Multi-Agent Control Platform (MCP) project, supporting both local development and containerized deployments.
Prerequisites JDK 17+ for Kotlin/Java components Python 3.11+ for Python agents NATS server for message passing Podman or Docker (optional, for containerized development) Local Development Environment Setup 1. Kotlin/JVM Components Setup We recommend using SDKMAN for managing JDK and Kotlin installations:
1 2 3 4 5 6 7 8 9 10 11 12 # Install SDKMAN curl -s &amp;#34;https://get.</description></item><item><title/><link>https://example.github.io/mcp-scope/mcp/mcp/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/getting-started/</guid><description>Getting Started with MCP Welcome to the Multi-Agent Control Platform (MCP) project! This guide will help you set up your development environment and understand the project structure so you can start contributing quickly.
What is MCP? MCP is a distributed system that orchestrates multiple specialized agents to perform coordinated tasks. The platform uses a message-based architecture with NATS as the communication backbone, allowing agents written in different languages to work together seamlessly.</description></item><item><title/><link>https://example.github.io/mcp-scope/mcp/mcp/local-development-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/local-development-guide/</guid><description>MCP Local Development Guide This guide provides instructions for setting up and working with the Multi-Agent Control Platform (MCP) in a local development environment.
Setting Up Your Local Environment Gradle Wrapper Setup for Kotlin Projects To ensure consistent builds across developer machines, we use Gradle wrapper. If you&amp;rsquo;re creating a new Kotlin component or the wrapper is missing, set it up:
1 2 3 4 5 6 # Navigate to the project directory (mcp-core or camera-agent) cd /home/verlyn13/Projects/mcp-scope/mcp-project/mcp-core # Generate the Gradle wrapper gradle wrapper --gradle-version 8.</description></item><item><title/><link>https://example.github.io/mcp-scope/template-integration-plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/template-integration-plan/</guid><description>Jinja2 Template Integration Plan for ScopeCam Documentation Overview This document outlines the plan for integrating Jinja2 templating into the ScopeCam MCP documentation workflow. The integration will enhance the existing documentation system with template-based content generation while maintaining compatibility with the Hugo static site generator.
Current Status Assessment Existing Documentation Tools doc-manager.py: Python tool that manages documentation structure, validation, and migration Hugo migration: In-progress migration of documentation to Hugo static site (Phase 3: 82% complete) Containerized environment: Development setup using podman-compose Current Documentation Structure Primary content in /docs/ and /mcp-project/docs/ Markdown files with YAML front matter Documentation organized by function (architecture, implementation, standards, etc.</description></item><item><title/><link>https://example.github.io/mcp-scope/test-output/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/test-output/</guid><description>This is a test template Generated content for Test Document This template was generated on 2025-03-23.
List of items: First item
Second item
Third item</description></item><item><title>API Documentation: API Name</title><link>https://example.github.io/mcp-scope/templates/api-documentation-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/templates/api-documentation-template/</guid><description>API Documentation: API Name ↩️ Back to Documentation Index
Overview Brief description of the API, its purpose, and which components it belongs to.
API Version Current Version: X.Y.Z
Description of versioning scheme and compatibility.
Prerequisites List prerequisites for using this API.
Prerequisite 1 Prerequisite 2 Prerequisite 3 Authentication and Authorization Describe authentication and authorization requirements, if any.
API Summary Provide a high-level summary of available operations.
Operation Description Access Level Operation 1 Description Public/Internal Operation 2 Description Public/Internal Detailed API Reference Operation 1: Name Detailed description of the operation.</description></item><item><title>Build Engineer Next Steps</title><link>https://example.github.io/mcp-scope/project/build-engineer-next-steps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/build-engineer-next-steps/</guid><description>Build Engineer Next Steps 🟢 Active
↩️ Back to Documentation Hub
Overview This document outlines the next steps for the build engineer to continue MCP implementation work. It consolidates information from existing plans and provides a clear sequence of tasks based on the current project state.
Current Project Status The initial implementation of the Multi-Agent Control Platform (MCP) is well underway. The following components have been completed:
✅ Project structure and organization ✅ Core MCP framework (interfaces, models, state machine) ✅ NATS messaging integration ✅ Basic orchestrator with agent management ✅ Camera integration agent with mock USB detection ✅ Python processor agent ✅ Containerized development environment ✅ Comprehensive documentation ✅ Unit testing framework ✅ Health monitoring system with metrics collection ✅ Resilience mechanisms (circuit breaker, state change listeners) Next Day Tasks 1.</description></item><item><title>Component Name</title><link>https://example.github.io/mcp-scope/templates/architecture-component-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/templates/architecture-component-template/</guid><description>Component Name ↩️ Back to Documentation Index | ↩️ Back to Architecture Overview
Overview Brief description of the component, its purpose, and role in the system.
Core Responsibilities List the primary responsibilities and functions of this component.
Responsibility one Responsibility two Responsibility three Component Architecture Describe the internal architecture of the component.
1 2 3 4 5 6 7 8 9 10 11 12 13 ┌─────────────────────────────────────────────┐ │ Component Name │ │ │ │ ┌─────────────┐ ┌────────────────┐ │ │ │ Subcomponent│ │ Subcomponent │ │ │ └─────────────┘ └────────────────┘ │ │ │ │ │ │ └─────────┬───────────┘ │ │ ▼ │ │ ┌───────────────────┐ │ │ │ Subcomponent │ │ │ └───────────────────┘ │ └─────────────────────────────────────────────┘ Core Interfaces Document the primary interfaces this component exposes or implements.</description></item><item><title>Content Inventory and Migration Prioritization</title><link>https://example.github.io/mcp-scope/content-inventory-and-prioritization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/content-inventory-and-prioritization/</guid><description>Content Inventory and Migration Prioritization 🟢 Active
Overview This document provides a complete inventory of all existing documentation to be migrated to the Hugo static site framework, along with a prioritized migration order. This structured approach ensures systematic migration of content while maintaining documentation availability throughout the process.
Complete Content Inventory The following tables list all documentation files in the current structure, organized by layer and section.
Root Documentation Layer Project Documentation Current Path Hugo Path Status Priority /docs/README.</description></item><item><title>Current Project Focus</title><link>https://example.github.io/mcp-scope/project/current-focus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/current-focus/</guid><description>Current Project Focus: Phase 1 Core Infrastructure ↩️ Back to Start Here | ↩️ Back to Documentation Index
Last Updated: March 22, 2025
Next Update: March 29, 2025
Current Sprint Priority We are currently in Sprint 1 of Phase 1 implementation, focused on establishing the core infrastructure components of the Multi-Agent Control Platform.
Primary Objectives This Week Implement FSM Framework and Agent Interfaces ⬅️ HIGHEST PRIORITY
Complete the core agent state machine implementation Implement the base agent interface Create the agent lifecycle management components Set Up NATS Messaging Integration</description></item><item><title>Doc Doctor Guide</title><link>https://example.github.io/mcp-scope/doc-doctor-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/doc-doctor-guide/</guid><description>Doc Doctor: Documentation Health Check System Status: Active ↩️ Back to Tools | ↩️ Back to Documentation Index
Overview Doc Doctor is a comprehensive documentation health check system designed to ensure high-quality, consistent documentation across the MCP project. It performs a variety of checks on documentation content, structure, and metadata to identify issues and provide actionable feedback.
Concept Think of Doc Doctor as a medical professional for your documentation - it performs routine check-ups, diagnoses issues, and provides treatment recommendations to keep your documentation healthy.</description></item><item><title>Documentation Compliance Check for Hugo Migration</title><link>https://example.github.io/mcp-scope/documentation-compliance-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/documentation-compliance-check/</guid><description>Documentation Compliance Check for Hugo Migration 🟢 Active
Overview This document verifies that all files created for the Hugo static site migration comply with the project&amp;rsquo;s documentation standards and follow the established plans. It serves as a quality assurance checkpoint before proceeding with full-scale content migration.
File Compliance Matrix Configuration Files File Standard Compliance Comments config/_default/config.toml ✅ Compliant Correctly defines taxonomies, permalinks, menus, and parameters config/development/config.toml ✅ Compliant Contains appropriate development-specific overrides config/production/config.</description></item><item><title>Documentation Directory Structure</title><link>https://example.github.io/mcp-scope/project/documentation-directory-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/documentation-directory-structure/</guid><description>Documentation Directory Structure ↩️ Back to Documentation Index
Overview This document provides a visual representation of the MCP documentation system&amp;rsquo;s directory structure. It serves as a map for navigating and maintaining the documentation.
Complete Directory Structure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 docs/ ├── README.</description></item><item><title>Documentation Guidelines</title><link>https://example.github.io/mcp-scope/standards/documentation-guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/standards/documentation-guidelines/</guid><description>Documentation Guidelines ↩️ Back to Documentation Index
Overview This document establishes the standards and best practices for creating and maintaining documentation for the Multi-Agent Control Platform (MCP). Following these guidelines ensures that our documentation remains consistent, accessible, and valuable throughout the project lifecycle.
Document Structure Standard Sections All technical documents should include these sections where applicable:
Overview: Brief introduction to the document&amp;rsquo;s purpose and content Prerequisites: Any information or setup required before using the document Main Content: The primary technical information (architecture, implementation, etc.</description></item><item><title>Documentation Migration Plan</title><link>https://example.github.io/mcp-scope/project/documentation-migration-plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/documentation-migration-plan/</guid><description>Documentation Migration Plan ↩️ Back to Documentation Index
Overview This document outlines the plan for migrating existing Multi-Agent Control Platform (MCP) documentation to the new standardized documentation system. The migration will ensure all technical content adheres to the established structure and standards while preserving valuable information.
Current Documentation State The MCP project currently has several key architecture documents:
README.md - Project overview first-steps.md - Initial setup instructions current-plan.md - Strategic plan architecture/fsm-agent-interfaces.</description></item><item><title>Dual-Layer Project Organization</title><link>https://example.github.io/mcp-scope/project/project-organization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/project-organization/</guid><description>Dual-Layer Project Organization 🟢 Active
↩️ Back to Documentation Hub
Overview The ScopeCam MCP project uses a dual-layer architecture for both code and documentation. This document clarifies this organizational approach to ensure consistent development and documentation practices across the project.
Dual-Layer Project Structure The project is organized into two distinct but related layers:
Layer Purpose Primary Path Documentation Path Root Project Layer ScopeCam project that integrates MCP for microscope control /home/verlyn13/Projects/mcp-scope/ /docs/ MCP Implementation Layer Multi-Agent Control Platform implementation /home/verlyn13/Projects/mcp-scope/mcp-project/ /mcp-project/docs/ Visual Representation of Layers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /home/verlyn13/Projects/mcp-scope/ # ROOT PROJECT LAYER ├── README.</description></item><item><title>Getting Started with MCP</title><link>https://example.github.io/mcp-scope/mcp/mcp/first-steps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/first-steps/</guid><description>Getting Started with MCP 🟢 Active
↩️ Back to Documentation Index
Overview Welcome to the Multi-Agent Control Platform (MCP) project! This guide will help you set up your development environment and understand the project structure so you can start contributing quickly.
Prerequisites JDK 17 or later for Kotlin components Python 3.11 or later for Python agents Gradle 8.0+ for building JVM components (or use the wrapper) NATS Server for local message transport Podman or Docker (optional, for containerized development) What is MCP?</description></item><item><title>Hugo Containerized Setup for MCP Documentation</title><link>https://example.github.io/mcp-scope/hugo-containerized-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-containerized-setup/</guid><description>Hugo Containerized Setup for MCP Documentation 🟢 Active
↩️ Back to Hugo Migration Executive Summary
Overview This document outlines how to integrate the Hugo static site documentation system with the existing ScopeCam MCP containerized development environment. It provides configuration details for developing, testing, and building the documentation site in a containerized environment consistent with the project&amp;rsquo;s established patterns.
Prerequisites Familiarity with the Containerized Development Environment Docker or Podman installed locally Basic understanding of the Hugo static site generator Access to the project repository Container Configuration Dockerfile for Hugo Development Create a Dockerfile.</description></item><item><title>Hugo Implementation Verification</title><link>https://example.github.io/mcp-scope/hugo-implementation-verification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-implementation-verification/</guid><description>Hugo Implementation Verification 🟢 Active
Overview This document provides a comprehensive verification of the Hugo implementation for the ScopeCam MCP documentation site. It confirms that all requirements from the migration plan have been met and that the implementation is ready for full-scale content migration.
Requirements Verification 1. Documentation Structure Requirements Requirement Status Evidence Preserve dual-layer structure ✅ Implemented Content directories organized into root and MCP layers with layer-specific navigation Maintain content hierarchy ✅ Implemented Section directories created with appropriate nesting and _index.</description></item><item><title>Hugo Migration Content Checklist</title><link>https://example.github.io/mcp-scope/hugo-migration-checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-migration-checklist/</guid><description>Hugo Migration Content Checklist 🟢 Active
Overview This checklist provides a step-by-step guide for migrating existing documentation to the Hugo static site framework. It ensures consistent application of standards and proper conversion of content during the migration process.
Pre-Migration Preparation Document Inventory Review the Hugo Migration File Mapping document Identify all documents to be migrated in the current documentation Verify the mapping for each document to its new location in the Hugo structure Create a prioritized list of documents to migrate Document any dependencies between documents (cross-references) Environment Setup Ensure the Hugo environment is properly set up according to Hugo Implementation Steps Verify that the containerized environment is working as expected Test the Hugo server with existing sample content Ensure you have appropriate editor with Markdown preview capability Content Migration Process Step 1: Section Structure Setup Create section index files (_index.</description></item><item><title>Hugo Migration Implementation Steps</title><link>https://example.github.io/mcp-scope/hugo-implementation-steps-update/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-implementation-steps-update/</guid><description>Hugo Migration Implementation Steps 🟢 Active
↩️ Back to Hugo Migration Executive Summary
Overview This document provides a detailed, step-by-step guide for implementing the ScopeCam MCP documentation migration to Hugo. The implementation process is designed to integrate seamlessly with the project&amp;rsquo;s existing containerized development environment and automation frameworks.
Prerequisites Access to the ScopeCam MCP repository Familiarity with the Containerized Development Environment Docker or Podman installed locally Basic understanding of Hugo Git and GitHub access Phase 1: Foundation Setup 1.</description></item><item><title>Hugo Migration Implementation Summary</title><link>https://example.github.io/mcp-scope/hugo-implementation-summary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-implementation-summary/</guid><description>Hugo Migration Implementation Summary Status: Active Overview This document provides a summary of the Hugo static site implementation for the ScopeCam MCP documentation. Phase 1 of the migration has been successfully completed, providing a solid foundation for the project&amp;rsquo;s documentation in Hugo format.
Implementation Status Component Status Completion Hugo Framework Setup 🟢 Complete 100% Theme Development 🟢 Complete 100% Content Migration - Phase 1 🟢 Complete 100% Content Migration - Overall 🟡 In Progress 29% Deployment Configuration 🟢 Complete 100% Quality Verification 🟢 Complete 100% Core Components Implemented 1.</description></item><item><title>Hugo Migration Progress Tracking</title><link>https://example.github.io/mcp-scope/migration-progress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/migration-progress/</guid><description>Hugo Migration Progress Tracking 🟢 Active
Overview This document tracks the progress of migrating ScopeCam MCP documentation to the Hugo static site framework. It provides real-time status updates on the migration process based on the prioritization plan.
Migration Progress Summary Phase Total Documents Migrated Progress Phase 1: Core Navigation and Entry Points 13 13 100% Phase 2: Essential Technical Documentation 12 8 67% Phase 3: Supporting Documentation 17 0 0% Phase 4: Templates and References 3 0 0% Overall Total 45 21 47% Detailed Migration Status Phase 1: Core Navigation and Entry Points ✅ Document Status Date Completed Notes /docs/README.</description></item><item><title>Hugo Shortcodes Reference for ScopeCam Documentation</title><link>https://example.github.io/mcp-scope/hugo-shortcodes-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-shortcodes-reference/</guid><description>Hugo Shortcodes Reference for ScopeCam Documentation 🟢 Active
Overview This document provides a reference guide for the custom Hugo shortcodes available in the ScopeCam MCP documentation site. Shortcodes allow for consistent application of special formatting and components across the documentation.
What Are Shortcodes? Shortcodes are special Hugo constructs that provide a simple way to extend Markdown&amp;rsquo;s capabilities. They allow for inserting complex content or formatting without resorting to HTML, ensuring consistency across the documentation.</description></item><item><title>Hugo Site Plan</title><link>https://example.github.io/mcp-scope/hugo-site-plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-site-plan/</guid><description>Hugo Site Plan Status: Active This document outlines the plan for implementing the Hugo-based documentation site for the MCP project.
Site Requirements Core Requirements Two Documentation Layers
Root Documentation Layer (all MCP documentation) MCP Core Documentation (specific to MCP core components) Section Organization
Project (project management, plans, etc.) Architecture (architectural decisions, components) Implementation (practical guides, code structure) Standards (guidelines, coding standards) Templates (reusable documentation templates) Tools (documentation tooling guides) Content Management</description></item><item><title>Hugo Theme Design</title><link>https://example.github.io/mcp-scope/hugo-theme-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-theme-design/</guid><description>Hugo Theme Design Status: Active This document outlines the design specifications for the MCP documentation Hugo theme.
Design Objectives The theme design is guided by these primary objectives:
Readability: Ensure all documentation is easy to read and navigate Consistency: Maintain consistent styling and interaction patterns Accessibility: Ensure documentation is accessible to all users Performance: Keep the site fast and lightweight Maintainability: Create a design that is easy to maintain and extend Design Strategy The theme will follow these design principles:</description></item><item><title>Implementation Guide: Component Name</title><link>https://example.github.io/mcp-scope/templates/implementation-guide-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/templates/implementation-guide-template/</guid><description>Implementation Guide: Component Name ↩️ Back to Documentation Index
Overview Brief description of what this implementation guide covers and what the component does.
Prerequisites List prerequisites for implementing this component.
Prerequisite 1 Prerequisite 2 Prerequisite 3 Environment Setup Describe any specific environment setup needed for this implementation.
1 # Example setup commands Implementation Steps Step 1: Title of First Step Detailed description of the first implementation step.
1 // Example code for step 1 Step 2: Title of Second Step Detailed description of the second implementation step.</description></item><item><title>Issues Registry</title><link>https://example.github.io/mcp-scope/project/issues-registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/issues-registry/</guid><description>Issues Registry ↩️ Back to Documentation Index
Overview The Issues Registry is a central catalog of known issues, limitations, pitfalls, and technical challenges in the Multi-Agent Control Platform (MCP). This document helps developers avoid common problems and provides solutions or workarounds where available.
Using This Registry Issues are categorized by component or system area Each issue has a unique identifier (e.g., MCP-ARCH-001) Status indicators show if issues are open, being addressed, or resolved Cross-references link to technical documentation with more details Status Indicators Status Description 🔴 Open Known issue without a complete solution 🟠 In Progress Issue being actively addressed 🟡 Mitigated Partial solution or workaround available 🟢 Resolved Issue has been completely resolved ⚫ Won&amp;rsquo;t Fix Issue acknowledged but won&amp;rsquo;t be addressed Core Architecture Issues MCP-ARCH-001: FSM Complexity with Many Agents Status: 🟡 Mitigated</description></item><item><title>MCP Architecture Overview</title><link>https://example.github.io/mcp-scope/architecture/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/architecture/overview/</guid><description>MCP Architecture Overview ↩️ Back to Documentation Index
Overview The Multi-Agent Control Platform (MCP) is a distributed system designed to streamline and automate Android UVC camera development processes. It employs a Finite State Machine (FSM) architecture with a central orchestrator that manages specialized agents through a lightweight messaging system.
This document provides a high-level overview of the system architecture, guiding principles, and references to detailed component specifications.
Key Architecture Goals The MCP architecture aims to achieve the following objectives:</description></item><item><title>MCP Architecture Overview</title><link>https://example.github.io/mcp-scope/mcp/mcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/overview/</guid><description>MCP Architecture Overview 🟢 Active
↩️ Back to Documentation Index
Overview This document provides a comprehensive overview of the Multi-Agent Control Platform (MCP) architecture, explaining the core components, their interactions, and the underlying design principles.
System Architecture The MCP system follows a message-driven, distributed architecture built around a central orchestrator and specialized agents:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ┌─────────────────────┐ │ │ │ Android Application │ │ │ └─────────┬───────────┘ │ HTTP/WebSocket ▼ ┌─────────────────────┐ │ MCP Orchestrator │◄────┐ │ ┌───────────────┐ │ │ │ │ FSM Engine │ │ │ Agent │ └───────────────┘ │ │ Registration └─────────┬───────────┘ │ │ NATS │ ▼ │ ┌─────────────────────┐ │ │ Agent Framework │─────┘ │ ┌───────┐ ┌──────┐ │ │ │Agent 1│ │Agent2│ │ │ └───────┘ └──────┘ │ └─────────────────────┘ Key Components MCP Orchestrator</description></item><item><title>MCP Containerized Development Environment</title><link>https://example.github.io/mcp-scope/guides/containerized-dev-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/containerized-dev-environment/</guid><description>Containerized Development Environment for MCP ↩️ Back to Start Here | ↩️ Back to Documentation Index
Overview This guide details the recommended containerized development environment for the Multi-Agent Control Platform (MCP) using Podman and Podman Compose. This setup provides environment consistency, isolation, and resource efficiency while maintaining development speed.
Why Podman? Podman is particularly well-suited for the MCP development on Fedora Linux for several key reasons:
Lower Resource Overhead: Podman is a daemonless container engine that consumes fewer resources than Docker&amp;rsquo;s daemon-based approach Native to Fedora: Podman comes pre-installed or easily available on Fedora, making it a natural fit Docker Compose Compatibility: Podman supports Docker Compose files through podman-compose Rootless Containers: Podman allows running containers without root privileges, improving security Systemd Integration: Better integration with Linux systemd for service management Prerequisites Before setting up the containerized environment, ensure you have the following installed:</description></item><item><title>MCP Containerized Development Guide</title><link>https://example.github.io/mcp-scope/mcp/mcp/containerized-development-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/containerized-development-guide/</guid><description>MCP Containerized Development Guide 🟢 Active
↩️ Back to Documentation Index
Overview This guide explains how to use the containerized development environment for the Multi-Agent Control Platform (MCP). Containerization ensures consistent behavior across different development machines and production environments.
Prerequisites Podman (recommended) or Docker Podman Compose or Docker Compose 1 2 3 4 5 6 # Install on Fedora/RHEL sudo dnf install -y podman podman-compose # Verify installation podman --version podman-compose --version Benefits of Containerized Development Environment Consistency: Identical development environments across all systems Dependency Isolation: No conflicts between project dependencies Service Orchestration: All components start in the correct order Resource Management: Easy cleanup and resource allocation Cross-Platform: Works the same on Linux, macOS, and Windows Container Architecture The containerized environment consists of these services:</description></item><item><title>MCP Development Environment Setup</title><link>https://example.github.io/mcp-scope/mcp/mcp/project-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/project-setup/</guid><description>MCP Development Environment Setup 🟢 Active
↩️ Back to Documentation Index
Overview This guide explains how to set up consistent development environments for the Multi-Agent Control Platform (MCP) project, supporting both local development and containerized deployments.
Prerequisites JDK 17+ for Kotlin/Java components Python 3.11+ for Python agents NATS server for message passing Podman or Docker (optional, for containerized development) Local Development Environment Setup 1. Kotlin/JVM Components Setup We recommend using SDKMAN for managing JDK and Kotlin installations:</description></item><item><title>MCP Documentation Entry Point</title><link>https://example.github.io/mcp-scope/start_here/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/start_here/</guid><description>START HERE: Multi-Agent Control Platform Documentation Welcome to the MCP Documentation System This document is the mandatory first stop for all team members working on the Multi-Agent Control Platform. It will direct you to the information you need based on your role and the current project focus.
Current Project Focus 🔍 CURRENT FOCUS: Phase 1 Implementation - Core Infrastructure
We are currently focused on implementing the core infrastructure components of the MCP platform, including the FSM framework, agent interfaces, NATS messaging integration, and basic health monitoring.</description></item><item><title>MCP Documentation Index</title><link>https://example.github.io/mcp-scope/mcp/mcp/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/readme/</guid><description>MCP Documentation Index 🟢 Active
↩️ Back to MCP Project | ↩️ Back to Documentation Hub
Overview This is the documentation index for the Multi-Agent Control Platform (MCP) implementation. This index serves as the starting point for all MCP-specific technical documentation.
Documentation Layer Context This documentation is part of the MCP Implementation Layer in our dual-layer documentation structure:
1 2 3 4 /home/verlyn13/Projects/mcp-scope/ # ROOT PROJECT LAYER ├── docs/ # Root documentation layer └── mcp-project/ # MCP IMPLEMENTATION LAYER └── docs/ # THIS DOCUMENTATION LAYER For information about the overall ScopeCam project and project organization, please refer to the Root Documentation Hub.</description></item><item><title>MCP Health Monitoring Guide</title><link>https://example.github.io/mcp-scope/guides/health-monitoring-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/health-monitoring-guide/</guid><description>MCP Health Monitoring Guide ↩️ Back to Start Here | ↩️ Back to Documentation Index
Overview This guide documents the health monitoring system implemented for the Multi-Agent Control Platform (MCP). The health monitoring system provides real-time metrics collection, health status reporting, and resilience mechanisms to ensure system reliability and observability.
Health Monitoring Components System Architecture The health monitoring system consists of the following components:
SystemMetricsCollector: Collects JVM and system-level metrics HealthCheckService: Provides health check endpoints and manages agent health status Circuit Breaker Pattern: Prevents cascading failures during outages Agent State Monitoring: Tracks agent state transitions for health assessment NATS Health Endpoints: For querying system and agent health status Metrics Collection The SystemMetricsCollector gathers various system and JVM metrics:</description></item><item><title>MCP Local Development Guide</title><link>https://example.github.io/mcp-scope/mcp/mcp/local-development-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/local-development-guide/</guid><description>MCP Local Development Guide 🟢 Active
↩️ Back to Documentation Index
Overview This guide provides instructions for setting up and working with the Multi-Agent Control Platform (MCP) in a local development environment.
Prerequisites Before following this guide, ensure you have completed the Project Setup to install required software.
Setting Up Your Local Environment Gradle Wrapper Setup for Kotlin Projects To ensure consistent builds across developer machines, we use Gradle wrapper. If you&amp;rsquo;re creating a new Kotlin component or the wrapper is missing, set it up:</description></item><item><title>MCP Testing Guide</title><link>https://example.github.io/mcp-scope/guides/testing-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/guides/testing-guide/</guid><description>MCP Testing Guide ↩️ Back to Start Here | ↩️ Back to Documentation Index
Overview This guide documents the testing infrastructure for the Multi-Agent Control Platform (MCP). It covers unit testing, integration testing, and health monitoring tests. The guide also provides best practices for writing new tests and running tests in both local and containerized environments.
Testing Infrastructure The MCP project uses the following testing libraries:
JUnit 5: Core testing framework Mockk: Mocking library for Kotlin Kotlin Test: Assertions and test utilities Kotlinx Coroutines Test: Utilities for testing coroutines The testing configuration is defined in the Gradle build files:</description></item><item><title>Path Reference Guide</title><link>https://example.github.io/mcp-scope/project/path-reference-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/project/path-reference-guide/</guid><description>Path Reference Guide 🟢 Active
↩️ Back to Documentation Hub
Overview This quick reference guide provides clear examples for correct path references across the dual-layer structure of the ScopeCam MCP project, eliminating path confusion once and for all.
Project Base Directories Layer Absolute Path Repository-Relative Path Root Project /home/verlyn13/Projects/mcp-scope / MCP Implementation /home/verlyn13/Projects/mcp-scope/mcp-project /mcp-project Documentation Directories Documentation Absolute Path Repository-Relative Path Root Documentation /home/verlyn13/Projects/mcp-scope/docs /docs MCP Documentation /home/verlyn13/Projects/mcp-scope/mcp-project/docs /mcp-project/docs Path Reference Examples ✅ Correct Path References From Root Documentation to Root Documentation 1 [Project Organization](/docs/project/project-organization.</description></item><item><title>Phase 1 Content Verification</title><link>https://example.github.io/mcp-scope/phase1-verification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/phase1-verification/</guid><description>Phase 1 Content Verification 🟢 Active
Overview This document provides a comprehensive verification of all content migrated during Phase 1 of the Hugo static site implementation. Before proceeding to Phase 2, we need to ensure all created content meets the project&amp;rsquo;s documentation standards.
Document Verification Checklist The following verification has been performed on all Phase 1 documents:
Front Matter Compliance Document Title Status Version Dates Contributors Related Docs Tags Result /content/_index.</description></item><item><title>ScopeCam MCP Documentation Hub</title><link>https://example.github.io/mcp-scope/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/readme/</guid><description>ScopeCam MCP Documentation Hub 🟢 Active
↩️ Back to Project Root
Documentation Organization Overview The ScopeCam MCP project uses a dual-layer documentation structure that mirrors the code organization:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 /home/verlyn13/Projects/mcp-scope/ # ROOT PROJECT LAYER ├── README.md # Root project dashboard ├── docs/ # ROOT DOCUMENTATION LAYER │ ├── README.md # This document - Navigation hub │ ├── project/ # Project-level information │ └── guides/ # Implementation and technical guides └── mcp-project/ # MCP IMPLEMENTATION LAYER ├── README.</description></item><item><title>ScopeCam MCP Documentation: Hugo Migration Executive Summary</title><link>https://example.github.io/mcp-scope/hugo-migration-executive-summary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-migration-executive-summary/</guid><description>ScopeCam MCP Documentation: Hugo Migration Executive Summary 🟢 Active
↩️ Back to Documentation Index
Overview This document provides an executive summary of the comprehensive plan to migrate the ScopeCam MCP documentation to a Hugo-based static site deployed on GitHub Pages. The migration will preserve the current dual-layer documentation structure while enhancing it with Hugo&amp;rsquo;s capabilities for organization, navigation, presentation, and search.
Key Benefits The migration to Hugo will provide the following benefits:</description></item><item><title>ScopeCam MCP Documentation: Hugo Migration Index</title><link>https://example.github.io/mcp-scope/hugo-migration-index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-migration-index/</guid><description>ScopeCam MCP Documentation: Hugo Migration Index 🟢 Active
↩️ Back to Documentation Index
Overview This document provides an index of all resources related to the migration of ScopeCam MCP documentation to a Hugo-based static site for GitHub Pages deployment. The migration has been carefully designed to preserve the existing documentation structure, align with project standards, and integrate with the containerized development environment.
Migration Documentation The migration plan consists of the following documents, each addressing a specific aspect of the migration process:</description></item><item><title>ScopeCam MCP Documentation: Hugo Migration Roles and Responsibilities</title><link>https://example.github.io/mcp-scope/hugo-migration-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/hugo-migration-roles/</guid><description>ScopeCam MCP Documentation: Hugo Migration Roles and Responsibilities 🟢 Active
↩️ Back to Hugo Migration Index
Overview This document defines the roles and responsibilities for implementing the Hugo documentation migration, specifically clarifying the division of responsibilities between the Documentation Architect and the Build Engineer. This collaboration model ensures that each specialist focuses on their area of expertise while working together toward a successful migration.
Role Division The migration to Hugo requires expertise in both documentation architecture and build engineering.</description></item></channel></rss>