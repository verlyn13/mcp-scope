<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mcps on ScopeCam MCP Documentation</title><link>https://example.github.io/mcp-scope/mcp/</link><description>Recent content in Mcps on ScopeCam MCP Documentation</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://example.github.io/mcp-scope/mcp/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://example.github.io/mcp-scope/mcp/mcp/containerized-development-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/containerized-development-guide/</guid><description>MCP Containerized Development Guide This guide explains how to use the containerized development environment for the Multi-Agent Control Platform (MCP). Containerization ensures consistent behavior across different development machines and production environments.
Benefits of Containerized Development Environment Consistency: Identical development environments across all systems Dependency Isolation: No conflicts between project dependencies Service Orchestration: All components start in the correct order Resource Management: Easy cleanup and resource allocation Cross-Platform: Works the same on Linux, macOS, and Windows Prerequisites Podman (recommended) or Docker Podman Compose or Docker Compose 1 2 3 4 5 6 # Install on Fedora/RHEL sudo dnf install -y podman podman-compose # Verify installation podman --version podman-compose --version Container Architecture The containerized environment consists of these services:</description></item><item><title/><link>https://example.github.io/mcp-scope/mcp/mcp/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/contributing/</guid><description>Contributing to the Multi-Agent Control Platform Thank you for your interest in contributing to the MCP project! This document provides guidelines and workflows to make the contribution process smooth and effective.
Code of Conduct This project adheres to a Code of Conduct that sets expectations for participation in our community. By participating, you are expected to uphold this code. Please report unacceptable behavior to the project maintainers.
How Can I Contribute?</description></item><item><title/><link>https://example.github.io/mcp-scope/mcp/mcp/environment-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/environment-setup/</guid><description>MCP Development Environment Setup This guide explains how to set up consistent development environments for the Multi-Agent Control Platform (MCP) project, supporting both local development and containerized deployments.
Prerequisites JDK 17+ for Kotlin/Java components Python 3.11+ for Python agents NATS server for message passing Podman or Docker (optional, for containerized development) Local Development Environment Setup 1. Kotlin/JVM Components Setup We recommend using SDKMAN for managing JDK and Kotlin installations:
1 2 3 4 5 6 7 8 9 10 11 12 # Install SDKMAN curl -s &amp;#34;https://get.</description></item><item><title/><link>https://example.github.io/mcp-scope/mcp/mcp/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/getting-started/</guid><description>Getting Started with MCP Welcome to the Multi-Agent Control Platform (MCP) project! This guide will help you set up your development environment and understand the project structure so you can start contributing quickly.
What is MCP? MCP is a distributed system that orchestrates multiple specialized agents to perform coordinated tasks. The platform uses a message-based architecture with NATS as the communication backbone, allowing agents written in different languages to work together seamlessly.</description></item><item><title/><link>https://example.github.io/mcp-scope/mcp/mcp/local-development-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/local-development-guide/</guid><description>MCP Local Development Guide This guide provides instructions for setting up and working with the Multi-Agent Control Platform (MCP) in a local development environment.
Setting Up Your Local Environment Gradle Wrapper Setup for Kotlin Projects To ensure consistent builds across developer machines, we use Gradle wrapper. If you&amp;rsquo;re creating a new Kotlin component or the wrapper is missing, set it up:
1 2 3 4 5 6 # Navigate to the project directory (mcp-core or camera-agent) cd /home/verlyn13/Projects/mcp-scope/mcp-project/mcp-core # Generate the Gradle wrapper gradle wrapper --gradle-version 8.</description></item><item><title>Getting Started with MCP</title><link>https://example.github.io/mcp-scope/mcp/mcp/first-steps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/first-steps/</guid><description>Getting Started with MCP 🟢 Active
↩️ Back to Documentation Index
Overview Welcome to the Multi-Agent Control Platform (MCP) project! This guide will help you set up your development environment and understand the project structure so you can start contributing quickly.
Prerequisites JDK 17 or later for Kotlin components Python 3.11 or later for Python agents Gradle 8.0+ for building JVM components (or use the wrapper) NATS Server for local message transport Podman or Docker (optional, for containerized development) What is MCP?</description></item><item><title>MCP Architecture Overview</title><link>https://example.github.io/mcp-scope/mcp/mcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/overview/</guid><description>MCP Architecture Overview 🟢 Active
↩️ Back to Documentation Index
Overview This document provides a comprehensive overview of the Multi-Agent Control Platform (MCP) architecture, explaining the core components, their interactions, and the underlying design principles.
System Architecture The MCP system follows a message-driven, distributed architecture built around a central orchestrator and specialized agents:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ┌─────────────────────┐ │ │ │ Android Application │ │ │ └─────────┬───────────┘ │ HTTP/WebSocket ▼ ┌─────────────────────┐ │ MCP Orchestrator │◄────┐ │ ┌───────────────┐ │ │ │ │ FSM Engine │ │ │ Agent │ └───────────────┘ │ │ Registration └─────────┬───────────┘ │ │ NATS │ ▼ │ ┌─────────────────────┐ │ │ Agent Framework │─────┘ │ ┌───────┐ ┌──────┐ │ │ │Agent 1│ │Agent2│ │ │ └───────┘ └──────┘ │ └─────────────────────┘ Key Components MCP Orchestrator</description></item><item><title>MCP Containerized Development Guide</title><link>https://example.github.io/mcp-scope/mcp/mcp/containerized-development-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/containerized-development-guide/</guid><description>MCP Containerized Development Guide 🟢 Active
↩️ Back to Documentation Index
Overview This guide explains how to use the containerized development environment for the Multi-Agent Control Platform (MCP). Containerization ensures consistent behavior across different development machines and production environments.
Prerequisites Podman (recommended) or Docker Podman Compose or Docker Compose 1 2 3 4 5 6 # Install on Fedora/RHEL sudo dnf install -y podman podman-compose # Verify installation podman --version podman-compose --version Benefits of Containerized Development Environment Consistency: Identical development environments across all systems Dependency Isolation: No conflicts between project dependencies Service Orchestration: All components start in the correct order Resource Management: Easy cleanup and resource allocation Cross-Platform: Works the same on Linux, macOS, and Windows Container Architecture The containerized environment consists of these services:</description></item><item><title>MCP Development Environment Setup</title><link>https://example.github.io/mcp-scope/mcp/mcp/project-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/project-setup/</guid><description>MCP Development Environment Setup 🟢 Active
↩️ Back to Documentation Index
Overview This guide explains how to set up consistent development environments for the Multi-Agent Control Platform (MCP) project, supporting both local development and containerized deployments.
Prerequisites JDK 17+ for Kotlin/Java components Python 3.11+ for Python agents NATS server for message passing Podman or Docker (optional, for containerized development) Local Development Environment Setup 1. Kotlin/JVM Components Setup We recommend using SDKMAN for managing JDK and Kotlin installations:</description></item><item><title>MCP Documentation Index</title><link>https://example.github.io/mcp-scope/mcp/mcp/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/readme/</guid><description>MCP Documentation Index 🟢 Active
↩️ Back to MCP Project | ↩️ Back to Documentation Hub
Overview This is the documentation index for the Multi-Agent Control Platform (MCP) implementation. This index serves as the starting point for all MCP-specific technical documentation.
Documentation Layer Context This documentation is part of the MCP Implementation Layer in our dual-layer documentation structure:
1 2 3 4 /home/verlyn13/Projects/mcp-scope/ # ROOT PROJECT LAYER ├── docs/ # Root documentation layer └── mcp-project/ # MCP IMPLEMENTATION LAYER └── docs/ # THIS DOCUMENTATION LAYER For information about the overall ScopeCam project and project organization, please refer to the Root Documentation Hub.</description></item><item><title>MCP Local Development Guide</title><link>https://example.github.io/mcp-scope/mcp/mcp/local-development-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.github.io/mcp-scope/mcp/mcp/local-development-guide/</guid><description>MCP Local Development Guide 🟢 Active
↩️ Back to Documentation Index
Overview This guide provides instructions for setting up and working with the Multi-Agent Control Platform (MCP) in a local development environment.
Prerequisites Before following this guide, ensure you have completed the Project Setup to install required software.
Setting Up Your Local Environment Gradle Wrapper Setup for Kotlin Projects To ensure consistent builds across developer machines, we use Gradle wrapper. If you&amp;rsquo;re creating a new Kotlin component or the wrapper is missing, set it up:</description></item></channel></rss>